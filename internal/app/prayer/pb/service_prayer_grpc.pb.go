// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: service_prayer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrayerService_CreatePrayerRoom_FullMethodName   = "/pb.PrayerService/CreatePrayerRoom"
	PrayerService_UpdatePrayerRoom_FullMethodName   = "/pb.PrayerService/UpdatePrayerRoom"
	PrayerService_DeletePrayerRoom_FullMethodName   = "/pb.PrayerService/DeletePrayerRoom"
	PrayerService_InviteParticipant_FullMethodName  = "/pb.PrayerService/InviteParticipant"
	PrayerService_AcceptInvitation_FullMethodName   = "/pb.PrayerService/AcceptInvitation"
	PrayerService_DeclineInvitation_FullMethodName  = "/pb.PrayerService/DeclineInvitation"
	PrayerService_GetUserPrayerRooms_FullMethodName = "/pb.PrayerService/GetUserPrayerRooms"
	PrayerService_JoinPrayerRoom_FullMethodName     = "/pb.PrayerService/JoinPrayerRoom"
)

// PrayerServiceClient is the client API for PrayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrayerServiceClient interface {
	// Method to create a new prayer room
	CreatePrayerRoom(ctx context.Context, in *CreatePrayerRoomRequest, opts ...grpc.CallOption) (*PrayerRoomResponse, error)
	// Method to update a prayer room
	UpdatePrayerRoom(ctx context.Context, in *PrayerRoom, opts ...grpc.CallOption) (*PrayerRoomResponse, error)
	// Method to delete a prayer room by its ID
	// rpc DeletePrayerRoom(google.protobuf.StringValue) returns (PrayerRoomResponse);
	DeletePrayerRoom(ctx context.Context, in *PrayerRoomId, opts ...grpc.CallOption) (*PrayerRoomResponse, error)
	// Method to invite a participant to a prayer room
	InviteParticipant(ctx context.Context, in *InviteParticipantRequest, opts ...grpc.CallOption) (*PrayerRoomResponse, error)
	// Method to accept an invitation to a prayer room
	AcceptInvitation(ctx context.Context, in *PrayerRoomId, opts ...grpc.CallOption) (*InvitationResponse, error)
	// Method to decline an invitation to a prayer room
	DeclineInvitation(ctx context.Context, in *PrayerRoomId, opts ...grpc.CallOption) (*InvitationResponse, error)
	// Get user's prayer rooms
	GetUserPrayerRooms(ctx context.Context, in *GetUserRoomsRequest, opts ...grpc.CallOption) (PrayerService_GetUserPrayerRoomsClient, error)
	// Method to decline an invitation to a prayer room
	JoinPrayerRoom(ctx context.Context, in *PrayerRoomId, opts ...grpc.CallOption) (*PrayerRoomResponse, error)
}

type prayerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrayerServiceClient(cc grpc.ClientConnInterface) PrayerServiceClient {
	return &prayerServiceClient{cc}
}

func (c *prayerServiceClient) CreatePrayerRoom(ctx context.Context, in *CreatePrayerRoomRequest, opts ...grpc.CallOption) (*PrayerRoomResponse, error) {
	out := new(PrayerRoomResponse)
	err := c.cc.Invoke(ctx, PrayerService_CreatePrayerRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prayerServiceClient) UpdatePrayerRoom(ctx context.Context, in *PrayerRoom, opts ...grpc.CallOption) (*PrayerRoomResponse, error) {
	out := new(PrayerRoomResponse)
	err := c.cc.Invoke(ctx, PrayerService_UpdatePrayerRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prayerServiceClient) DeletePrayerRoom(ctx context.Context, in *PrayerRoomId, opts ...grpc.CallOption) (*PrayerRoomResponse, error) {
	out := new(PrayerRoomResponse)
	err := c.cc.Invoke(ctx, PrayerService_DeletePrayerRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prayerServiceClient) InviteParticipant(ctx context.Context, in *InviteParticipantRequest, opts ...grpc.CallOption) (*PrayerRoomResponse, error) {
	out := new(PrayerRoomResponse)
	err := c.cc.Invoke(ctx, PrayerService_InviteParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prayerServiceClient) AcceptInvitation(ctx context.Context, in *PrayerRoomId, opts ...grpc.CallOption) (*InvitationResponse, error) {
	out := new(InvitationResponse)
	err := c.cc.Invoke(ctx, PrayerService_AcceptInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prayerServiceClient) DeclineInvitation(ctx context.Context, in *PrayerRoomId, opts ...grpc.CallOption) (*InvitationResponse, error) {
	out := new(InvitationResponse)
	err := c.cc.Invoke(ctx, PrayerService_DeclineInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prayerServiceClient) GetUserPrayerRooms(ctx context.Context, in *GetUserRoomsRequest, opts ...grpc.CallOption) (PrayerService_GetUserPrayerRoomsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrayerService_ServiceDesc.Streams[0], PrayerService_GetUserPrayerRooms_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &prayerServiceGetUserPrayerRoomsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrayerService_GetUserPrayerRoomsClient interface {
	Recv() (*PrayerRoom, error)
	grpc.ClientStream
}

type prayerServiceGetUserPrayerRoomsClient struct {
	grpc.ClientStream
}

func (x *prayerServiceGetUserPrayerRoomsClient) Recv() (*PrayerRoom, error) {
	m := new(PrayerRoom)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prayerServiceClient) JoinPrayerRoom(ctx context.Context, in *PrayerRoomId, opts ...grpc.CallOption) (*PrayerRoomResponse, error) {
	out := new(PrayerRoomResponse)
	err := c.cc.Invoke(ctx, PrayerService_JoinPrayerRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrayerServiceServer is the server API for PrayerService service.
// All implementations must embed UnimplementedPrayerServiceServer
// for forward compatibility
type PrayerServiceServer interface {
	// Method to create a new prayer room
	CreatePrayerRoom(context.Context, *CreatePrayerRoomRequest) (*PrayerRoomResponse, error)
	// Method to update a prayer room
	UpdatePrayerRoom(context.Context, *PrayerRoom) (*PrayerRoomResponse, error)
	// Method to delete a prayer room by its ID
	// rpc DeletePrayerRoom(google.protobuf.StringValue) returns (PrayerRoomResponse);
	DeletePrayerRoom(context.Context, *PrayerRoomId) (*PrayerRoomResponse, error)
	// Method to invite a participant to a prayer room
	InviteParticipant(context.Context, *InviteParticipantRequest) (*PrayerRoomResponse, error)
	// Method to accept an invitation to a prayer room
	AcceptInvitation(context.Context, *PrayerRoomId) (*InvitationResponse, error)
	// Method to decline an invitation to a prayer room
	DeclineInvitation(context.Context, *PrayerRoomId) (*InvitationResponse, error)
	// Get user's prayer rooms
	GetUserPrayerRooms(*GetUserRoomsRequest, PrayerService_GetUserPrayerRoomsServer) error
	// Method to decline an invitation to a prayer room
	JoinPrayerRoom(context.Context, *PrayerRoomId) (*PrayerRoomResponse, error)
	mustEmbedUnimplementedPrayerServiceServer()
}

// UnimplementedPrayerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrayerServiceServer struct {
}

func (UnimplementedPrayerServiceServer) CreatePrayerRoom(context.Context, *CreatePrayerRoomRequest) (*PrayerRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrayerRoom not implemented")
}
func (UnimplementedPrayerServiceServer) UpdatePrayerRoom(context.Context, *PrayerRoom) (*PrayerRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrayerRoom not implemented")
}
func (UnimplementedPrayerServiceServer) DeletePrayerRoom(context.Context, *PrayerRoomId) (*PrayerRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrayerRoom not implemented")
}
func (UnimplementedPrayerServiceServer) InviteParticipant(context.Context, *InviteParticipantRequest) (*PrayerRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteParticipant not implemented")
}
func (UnimplementedPrayerServiceServer) AcceptInvitation(context.Context, *PrayerRoomId) (*InvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedPrayerServiceServer) DeclineInvitation(context.Context, *PrayerRoomId) (*InvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineInvitation not implemented")
}
func (UnimplementedPrayerServiceServer) GetUserPrayerRooms(*GetUserRoomsRequest, PrayerService_GetUserPrayerRoomsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserPrayerRooms not implemented")
}
func (UnimplementedPrayerServiceServer) JoinPrayerRoom(context.Context, *PrayerRoomId) (*PrayerRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPrayerRoom not implemented")
}
func (UnimplementedPrayerServiceServer) mustEmbedUnimplementedPrayerServiceServer() {}

// UnsafePrayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrayerServiceServer will
// result in compilation errors.
type UnsafePrayerServiceServer interface {
	mustEmbedUnimplementedPrayerServiceServer()
}

func RegisterPrayerServiceServer(s grpc.ServiceRegistrar, srv PrayerServiceServer) {
	s.RegisterService(&PrayerService_ServiceDesc, srv)
}

func _PrayerService_CreatePrayerRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrayerRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrayerServiceServer).CreatePrayerRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrayerService_CreatePrayerRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrayerServiceServer).CreatePrayerRoom(ctx, req.(*CreatePrayerRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrayerService_UpdatePrayerRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrayerRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrayerServiceServer).UpdatePrayerRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrayerService_UpdatePrayerRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrayerServiceServer).UpdatePrayerRoom(ctx, req.(*PrayerRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrayerService_DeletePrayerRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrayerRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrayerServiceServer).DeletePrayerRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrayerService_DeletePrayerRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrayerServiceServer).DeletePrayerRoom(ctx, req.(*PrayerRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrayerService_InviteParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrayerServiceServer).InviteParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrayerService_InviteParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrayerServiceServer).InviteParticipant(ctx, req.(*InviteParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrayerService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrayerRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrayerServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrayerService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrayerServiceServer).AcceptInvitation(ctx, req.(*PrayerRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrayerService_DeclineInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrayerRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrayerServiceServer).DeclineInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrayerService_DeclineInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrayerServiceServer).DeclineInvitation(ctx, req.(*PrayerRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrayerService_GetUserPrayerRooms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserRoomsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrayerServiceServer).GetUserPrayerRooms(m, &prayerServiceGetUserPrayerRoomsServer{stream})
}

type PrayerService_GetUserPrayerRoomsServer interface {
	Send(*PrayerRoom) error
	grpc.ServerStream
}

type prayerServiceGetUserPrayerRoomsServer struct {
	grpc.ServerStream
}

func (x *prayerServiceGetUserPrayerRoomsServer) Send(m *PrayerRoom) error {
	return x.ServerStream.SendMsg(m)
}

func _PrayerService_JoinPrayerRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrayerRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrayerServiceServer).JoinPrayerRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrayerService_JoinPrayerRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrayerServiceServer).JoinPrayerRoom(ctx, req.(*PrayerRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

// PrayerService_ServiceDesc is the grpc.ServiceDesc for PrayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PrayerService",
	HandlerType: (*PrayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrayerRoom",
			Handler:    _PrayerService_CreatePrayerRoom_Handler,
		},
		{
			MethodName: "UpdatePrayerRoom",
			Handler:    _PrayerService_UpdatePrayerRoom_Handler,
		},
		{
			MethodName: "DeletePrayerRoom",
			Handler:    _PrayerService_DeletePrayerRoom_Handler,
		},
		{
			MethodName: "InviteParticipant",
			Handler:    _PrayerService_InviteParticipant_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _PrayerService_AcceptInvitation_Handler,
		},
		{
			MethodName: "DeclineInvitation",
			Handler:    _PrayerService_DeclineInvitation_Handler,
		},
		{
			MethodName: "JoinPrayerRoom",
			Handler:    _PrayerService_JoinPrayerRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserPrayerRooms",
			Handler:       _PrayerService_GetUserPrayerRooms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_prayer.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: service_bible.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BibleService_SearchVerse_FullMethodName                = "/pb.BibleService/SearchVerse"
	BibleService_GetVerseRange_FullMethodName              = "/pb.BibleService/GetVerseRange"
	BibleService_SearchByKeyword_FullMethodName            = "/pb.BibleService/SearchByKeyword"
	BibleService_ListAllBooks_FullMethodName               = "/pb.BibleService/ListAllBooks"
	BibleService_ListAllChaptersOfBook_FullMethodName      = "/pb.BibleService/ListAllChaptersOfBook"
	BibleService_ListAllChaptersOfBookUnary_FullMethodName = "/pb.BibleService/ListAllChaptersOfBookUnary"
	BibleService_ListAllVersesOfChapter_FullMethodName     = "/pb.BibleService/ListAllVersesOfChapter"
	BibleService_RandomVerseGenerator_FullMethodName       = "/pb.BibleService/RandomVerseGenerator"
	BibleService_SearchByTopic_FullMethodName              = "/pb.BibleService/SearchByTopic"
	BibleService_VerseOfTheDay_FullMethodName              = "/pb.BibleService/VerseOfTheDay"
	BibleService_GenerateReadingPlan_FullMethodName        = "/pb.BibleService/GenerateReadingPlan"
	BibleService_GetCurrentReading_FullMethodName          = "/pb.BibleService/GetCurrentReading"
	BibleService_DownloadBible_FullMethodName              = "/pb.BibleService/DownloadBible"
	BibleService_CompareTranslations_FullMethodName        = "/pb.BibleService/CompareTranslations"
)

// BibleServiceClient is the client API for BibleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BibleServiceClient interface {
	SearchVerse(ctx context.Context, in *SearchVerseRequest, opts ...grpc.CallOption) (*Verse, error)
	GetVerseRange(ctx context.Context, in *GetVerseRangeRequest, opts ...grpc.CallOption) (*VerseRange, error)
	SearchByKeyword(ctx context.Context, in *SearchByKeywordRequest, opts ...grpc.CallOption) (BibleService_SearchByKeywordClient, error)
	ListAllBooks(ctx context.Context, in *ListAllBooksRequest, opts ...grpc.CallOption) (BibleService_ListAllBooksClient, error)
	ListAllChaptersOfBook(ctx context.Context, in *ListAllChaptersOfBookRequest, opts ...grpc.CallOption) (BibleService_ListAllChaptersOfBookClient, error)
	ListAllChaptersOfBookUnary(ctx context.Context, in *ListAllChaptersOfBookRequest, opts ...grpc.CallOption) (*ListAllChaptersOfBookUnaryResponse, error)
	ListAllVersesOfChapter(ctx context.Context, in *ListAllVersesOfChapterRequest, opts ...grpc.CallOption) (BibleService_ListAllVersesOfChapterClient, error)
	RandomVerseGenerator(ctx context.Context, in *RandomVerseGeneratorRequest, opts ...grpc.CallOption) (*Verse, error)
	SearchByTopic(ctx context.Context, in *SearchByTopicRequest, opts ...grpc.CallOption) (BibleService_SearchByTopicClient, error)
	VerseOfTheDay(ctx context.Context, in *VerseOfTheDayRequest, opts ...grpc.CallOption) (*Verse, error)
	GenerateReadingPlan(ctx context.Context, in *GenerateReadingPlanRequest, opts ...grpc.CallOption) (BibleService_GenerateReadingPlanClient, error)
	GetCurrentReading(ctx context.Context, in *GetCurrentReadingRequest, opts ...grpc.CallOption) (*BiblePlan, error)
	DownloadBible(ctx context.Context, in *DownloadBibleRequest, opts ...grpc.CallOption) (BibleService_DownloadBibleClient, error)
	CompareTranslations(ctx context.Context, in *CompareTranslationsRequest, opts ...grpc.CallOption) (BibleService_CompareTranslationsClient, error)
}

type bibleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBibleServiceClient(cc grpc.ClientConnInterface) BibleServiceClient {
	return &bibleServiceClient{cc}
}

func (c *bibleServiceClient) SearchVerse(ctx context.Context, in *SearchVerseRequest, opts ...grpc.CallOption) (*Verse, error) {
	out := new(Verse)
	err := c.cc.Invoke(ctx, BibleService_SearchVerse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bibleServiceClient) GetVerseRange(ctx context.Context, in *GetVerseRangeRequest, opts ...grpc.CallOption) (*VerseRange, error) {
	out := new(VerseRange)
	err := c.cc.Invoke(ctx, BibleService_GetVerseRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bibleServiceClient) SearchByKeyword(ctx context.Context, in *SearchByKeywordRequest, opts ...grpc.CallOption) (BibleService_SearchByKeywordClient, error) {
	stream, err := c.cc.NewStream(ctx, &BibleService_ServiceDesc.Streams[0], BibleService_SearchByKeyword_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bibleServiceSearchByKeywordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BibleService_SearchByKeywordClient interface {
	Recv() (*Verse, error)
	grpc.ClientStream
}

type bibleServiceSearchByKeywordClient struct {
	grpc.ClientStream
}

func (x *bibleServiceSearchByKeywordClient) Recv() (*Verse, error) {
	m := new(Verse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bibleServiceClient) ListAllBooks(ctx context.Context, in *ListAllBooksRequest, opts ...grpc.CallOption) (BibleService_ListAllBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &BibleService_ServiceDesc.Streams[1], BibleService_ListAllBooks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bibleServiceListAllBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BibleService_ListAllBooksClient interface {
	Recv() (*ListAllBooksResponse, error)
	grpc.ClientStream
}

type bibleServiceListAllBooksClient struct {
	grpc.ClientStream
}

func (x *bibleServiceListAllBooksClient) Recv() (*ListAllBooksResponse, error) {
	m := new(ListAllBooksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bibleServiceClient) ListAllChaptersOfBook(ctx context.Context, in *ListAllChaptersOfBookRequest, opts ...grpc.CallOption) (BibleService_ListAllChaptersOfBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &BibleService_ServiceDesc.Streams[2], BibleService_ListAllChaptersOfBook_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bibleServiceListAllChaptersOfBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BibleService_ListAllChaptersOfBookClient interface {
	Recv() (*ListAllChaptersOfBookResponse, error)
	grpc.ClientStream
}

type bibleServiceListAllChaptersOfBookClient struct {
	grpc.ClientStream
}

func (x *bibleServiceListAllChaptersOfBookClient) Recv() (*ListAllChaptersOfBookResponse, error) {
	m := new(ListAllChaptersOfBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bibleServiceClient) ListAllChaptersOfBookUnary(ctx context.Context, in *ListAllChaptersOfBookRequest, opts ...grpc.CallOption) (*ListAllChaptersOfBookUnaryResponse, error) {
	out := new(ListAllChaptersOfBookUnaryResponse)
	err := c.cc.Invoke(ctx, BibleService_ListAllChaptersOfBookUnary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bibleServiceClient) ListAllVersesOfChapter(ctx context.Context, in *ListAllVersesOfChapterRequest, opts ...grpc.CallOption) (BibleService_ListAllVersesOfChapterClient, error) {
	stream, err := c.cc.NewStream(ctx, &BibleService_ServiceDesc.Streams[3], BibleService_ListAllVersesOfChapter_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bibleServiceListAllVersesOfChapterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BibleService_ListAllVersesOfChapterClient interface {
	Recv() (*Verse, error)
	grpc.ClientStream
}

type bibleServiceListAllVersesOfChapterClient struct {
	grpc.ClientStream
}

func (x *bibleServiceListAllVersesOfChapterClient) Recv() (*Verse, error) {
	m := new(Verse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bibleServiceClient) RandomVerseGenerator(ctx context.Context, in *RandomVerseGeneratorRequest, opts ...grpc.CallOption) (*Verse, error) {
	out := new(Verse)
	err := c.cc.Invoke(ctx, BibleService_RandomVerseGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bibleServiceClient) SearchByTopic(ctx context.Context, in *SearchByTopicRequest, opts ...grpc.CallOption) (BibleService_SearchByTopicClient, error) {
	stream, err := c.cc.NewStream(ctx, &BibleService_ServiceDesc.Streams[4], BibleService_SearchByTopic_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bibleServiceSearchByTopicClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BibleService_SearchByTopicClient interface {
	Recv() (*Verse, error)
	grpc.ClientStream
}

type bibleServiceSearchByTopicClient struct {
	grpc.ClientStream
}

func (x *bibleServiceSearchByTopicClient) Recv() (*Verse, error) {
	m := new(Verse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bibleServiceClient) VerseOfTheDay(ctx context.Context, in *VerseOfTheDayRequest, opts ...grpc.CallOption) (*Verse, error) {
	out := new(Verse)
	err := c.cc.Invoke(ctx, BibleService_VerseOfTheDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bibleServiceClient) GenerateReadingPlan(ctx context.Context, in *GenerateReadingPlanRequest, opts ...grpc.CallOption) (BibleService_GenerateReadingPlanClient, error) {
	stream, err := c.cc.NewStream(ctx, &BibleService_ServiceDesc.Streams[5], BibleService_GenerateReadingPlan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bibleServiceGenerateReadingPlanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BibleService_GenerateReadingPlanClient interface {
	Recv() (*BiblePlan, error)
	grpc.ClientStream
}

type bibleServiceGenerateReadingPlanClient struct {
	grpc.ClientStream
}

func (x *bibleServiceGenerateReadingPlanClient) Recv() (*BiblePlan, error) {
	m := new(BiblePlan)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bibleServiceClient) GetCurrentReading(ctx context.Context, in *GetCurrentReadingRequest, opts ...grpc.CallOption) (*BiblePlan, error) {
	out := new(BiblePlan)
	err := c.cc.Invoke(ctx, BibleService_GetCurrentReading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bibleServiceClient) DownloadBible(ctx context.Context, in *DownloadBibleRequest, opts ...grpc.CallOption) (BibleService_DownloadBibleClient, error) {
	stream, err := c.cc.NewStream(ctx, &BibleService_ServiceDesc.Streams[6], BibleService_DownloadBible_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bibleServiceDownloadBibleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BibleService_DownloadBibleClient interface {
	Recv() (*DownloadBibleResponse, error)
	grpc.ClientStream
}

type bibleServiceDownloadBibleClient struct {
	grpc.ClientStream
}

func (x *bibleServiceDownloadBibleClient) Recv() (*DownloadBibleResponse, error) {
	m := new(DownloadBibleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bibleServiceClient) CompareTranslations(ctx context.Context, in *CompareTranslationsRequest, opts ...grpc.CallOption) (BibleService_CompareTranslationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BibleService_ServiceDesc.Streams[7], BibleService_CompareTranslations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bibleServiceCompareTranslationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BibleService_CompareTranslationsClient interface {
	Recv() (*Verse, error)
	grpc.ClientStream
}

type bibleServiceCompareTranslationsClient struct {
	grpc.ClientStream
}

func (x *bibleServiceCompareTranslationsClient) Recv() (*Verse, error) {
	m := new(Verse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BibleServiceServer is the server API for BibleService service.
// All implementations must embed UnimplementedBibleServiceServer
// for forward compatibility
type BibleServiceServer interface {
	SearchVerse(context.Context, *SearchVerseRequest) (*Verse, error)
	GetVerseRange(context.Context, *GetVerseRangeRequest) (*VerseRange, error)
	SearchByKeyword(*SearchByKeywordRequest, BibleService_SearchByKeywordServer) error
	ListAllBooks(*ListAllBooksRequest, BibleService_ListAllBooksServer) error
	ListAllChaptersOfBook(*ListAllChaptersOfBookRequest, BibleService_ListAllChaptersOfBookServer) error
	ListAllChaptersOfBookUnary(context.Context, *ListAllChaptersOfBookRequest) (*ListAllChaptersOfBookUnaryResponse, error)
	ListAllVersesOfChapter(*ListAllVersesOfChapterRequest, BibleService_ListAllVersesOfChapterServer) error
	RandomVerseGenerator(context.Context, *RandomVerseGeneratorRequest) (*Verse, error)
	SearchByTopic(*SearchByTopicRequest, BibleService_SearchByTopicServer) error
	VerseOfTheDay(context.Context, *VerseOfTheDayRequest) (*Verse, error)
	GenerateReadingPlan(*GenerateReadingPlanRequest, BibleService_GenerateReadingPlanServer) error
	GetCurrentReading(context.Context, *GetCurrentReadingRequest) (*BiblePlan, error)
	DownloadBible(*DownloadBibleRequest, BibleService_DownloadBibleServer) error
	CompareTranslations(*CompareTranslationsRequest, BibleService_CompareTranslationsServer) error
	mustEmbedUnimplementedBibleServiceServer()
}

// UnimplementedBibleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBibleServiceServer struct {
}

func (UnimplementedBibleServiceServer) SearchVerse(context.Context, *SearchVerseRequest) (*Verse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVerse not implemented")
}
func (UnimplementedBibleServiceServer) GetVerseRange(context.Context, *GetVerseRangeRequest) (*VerseRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerseRange not implemented")
}
func (UnimplementedBibleServiceServer) SearchByKeyword(*SearchByKeywordRequest, BibleService_SearchByKeywordServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchByKeyword not implemented")
}
func (UnimplementedBibleServiceServer) ListAllBooks(*ListAllBooksRequest, BibleService_ListAllBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllBooks not implemented")
}
func (UnimplementedBibleServiceServer) ListAllChaptersOfBook(*ListAllChaptersOfBookRequest, BibleService_ListAllChaptersOfBookServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllChaptersOfBook not implemented")
}
func (UnimplementedBibleServiceServer) ListAllChaptersOfBookUnary(context.Context, *ListAllChaptersOfBookRequest) (*ListAllChaptersOfBookUnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllChaptersOfBookUnary not implemented")
}
func (UnimplementedBibleServiceServer) ListAllVersesOfChapter(*ListAllVersesOfChapterRequest, BibleService_ListAllVersesOfChapterServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllVersesOfChapter not implemented")
}
func (UnimplementedBibleServiceServer) RandomVerseGenerator(context.Context, *RandomVerseGeneratorRequest) (*Verse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomVerseGenerator not implemented")
}
func (UnimplementedBibleServiceServer) SearchByTopic(*SearchByTopicRequest, BibleService_SearchByTopicServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchByTopic not implemented")
}
func (UnimplementedBibleServiceServer) VerseOfTheDay(context.Context, *VerseOfTheDayRequest) (*Verse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerseOfTheDay not implemented")
}
func (UnimplementedBibleServiceServer) GenerateReadingPlan(*GenerateReadingPlanRequest, BibleService_GenerateReadingPlanServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateReadingPlan not implemented")
}
func (UnimplementedBibleServiceServer) GetCurrentReading(context.Context, *GetCurrentReadingRequest) (*BiblePlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentReading not implemented")
}
func (UnimplementedBibleServiceServer) DownloadBible(*DownloadBibleRequest, BibleService_DownloadBibleServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBible not implemented")
}
func (UnimplementedBibleServiceServer) CompareTranslations(*CompareTranslationsRequest, BibleService_CompareTranslationsServer) error {
	return status.Errorf(codes.Unimplemented, "method CompareTranslations not implemented")
}
func (UnimplementedBibleServiceServer) mustEmbedUnimplementedBibleServiceServer() {}

// UnsafeBibleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BibleServiceServer will
// result in compilation errors.
type UnsafeBibleServiceServer interface {
	mustEmbedUnimplementedBibleServiceServer()
}

func RegisterBibleServiceServer(s grpc.ServiceRegistrar, srv BibleServiceServer) {
	s.RegisterService(&BibleService_ServiceDesc, srv)
}

func _BibleService_SearchVerse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVerseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BibleServiceServer).SearchVerse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BibleService_SearchVerse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BibleServiceServer).SearchVerse(ctx, req.(*SearchVerseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BibleService_GetVerseRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerseRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BibleServiceServer).GetVerseRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BibleService_GetVerseRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BibleServiceServer).GetVerseRange(ctx, req.(*GetVerseRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BibleService_SearchByKeyword_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchByKeywordRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BibleServiceServer).SearchByKeyword(m, &bibleServiceSearchByKeywordServer{stream})
}

type BibleService_SearchByKeywordServer interface {
	Send(*Verse) error
	grpc.ServerStream
}

type bibleServiceSearchByKeywordServer struct {
	grpc.ServerStream
}

func (x *bibleServiceSearchByKeywordServer) Send(m *Verse) error {
	return x.ServerStream.SendMsg(m)
}

func _BibleService_ListAllBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAllBooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BibleServiceServer).ListAllBooks(m, &bibleServiceListAllBooksServer{stream})
}

type BibleService_ListAllBooksServer interface {
	Send(*ListAllBooksResponse) error
	grpc.ServerStream
}

type bibleServiceListAllBooksServer struct {
	grpc.ServerStream
}

func (x *bibleServiceListAllBooksServer) Send(m *ListAllBooksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BibleService_ListAllChaptersOfBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAllChaptersOfBookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BibleServiceServer).ListAllChaptersOfBook(m, &bibleServiceListAllChaptersOfBookServer{stream})
}

type BibleService_ListAllChaptersOfBookServer interface {
	Send(*ListAllChaptersOfBookResponse) error
	grpc.ServerStream
}

type bibleServiceListAllChaptersOfBookServer struct {
	grpc.ServerStream
}

func (x *bibleServiceListAllChaptersOfBookServer) Send(m *ListAllChaptersOfBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BibleService_ListAllChaptersOfBookUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllChaptersOfBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BibleServiceServer).ListAllChaptersOfBookUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BibleService_ListAllChaptersOfBookUnary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BibleServiceServer).ListAllChaptersOfBookUnary(ctx, req.(*ListAllChaptersOfBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BibleService_ListAllVersesOfChapter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAllVersesOfChapterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BibleServiceServer).ListAllVersesOfChapter(m, &bibleServiceListAllVersesOfChapterServer{stream})
}

type BibleService_ListAllVersesOfChapterServer interface {
	Send(*Verse) error
	grpc.ServerStream
}

type bibleServiceListAllVersesOfChapterServer struct {
	grpc.ServerStream
}

func (x *bibleServiceListAllVersesOfChapterServer) Send(m *Verse) error {
	return x.ServerStream.SendMsg(m)
}

func _BibleService_RandomVerseGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomVerseGeneratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BibleServiceServer).RandomVerseGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BibleService_RandomVerseGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BibleServiceServer).RandomVerseGenerator(ctx, req.(*RandomVerseGeneratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BibleService_SearchByTopic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchByTopicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BibleServiceServer).SearchByTopic(m, &bibleServiceSearchByTopicServer{stream})
}

type BibleService_SearchByTopicServer interface {
	Send(*Verse) error
	grpc.ServerStream
}

type bibleServiceSearchByTopicServer struct {
	grpc.ServerStream
}

func (x *bibleServiceSearchByTopicServer) Send(m *Verse) error {
	return x.ServerStream.SendMsg(m)
}

func _BibleService_VerseOfTheDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerseOfTheDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BibleServiceServer).VerseOfTheDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BibleService_VerseOfTheDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BibleServiceServer).VerseOfTheDay(ctx, req.(*VerseOfTheDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BibleService_GenerateReadingPlan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateReadingPlanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BibleServiceServer).GenerateReadingPlan(m, &bibleServiceGenerateReadingPlanServer{stream})
}

type BibleService_GenerateReadingPlanServer interface {
	Send(*BiblePlan) error
	grpc.ServerStream
}

type bibleServiceGenerateReadingPlanServer struct {
	grpc.ServerStream
}

func (x *bibleServiceGenerateReadingPlanServer) Send(m *BiblePlan) error {
	return x.ServerStream.SendMsg(m)
}

func _BibleService_GetCurrentReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentReadingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BibleServiceServer).GetCurrentReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BibleService_GetCurrentReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BibleServiceServer).GetCurrentReading(ctx, req.(*GetCurrentReadingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BibleService_DownloadBible_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadBibleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BibleServiceServer).DownloadBible(m, &bibleServiceDownloadBibleServer{stream})
}

type BibleService_DownloadBibleServer interface {
	Send(*DownloadBibleResponse) error
	grpc.ServerStream
}

type bibleServiceDownloadBibleServer struct {
	grpc.ServerStream
}

func (x *bibleServiceDownloadBibleServer) Send(m *DownloadBibleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BibleService_CompareTranslations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompareTranslationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BibleServiceServer).CompareTranslations(m, &bibleServiceCompareTranslationsServer{stream})
}

type BibleService_CompareTranslationsServer interface {
	Send(*Verse) error
	grpc.ServerStream
}

type bibleServiceCompareTranslationsServer struct {
	grpc.ServerStream
}

func (x *bibleServiceCompareTranslationsServer) Send(m *Verse) error {
	return x.ServerStream.SendMsg(m)
}

// BibleService_ServiceDesc is the grpc.ServiceDesc for BibleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BibleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BibleService",
	HandlerType: (*BibleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchVerse",
			Handler:    _BibleService_SearchVerse_Handler,
		},
		{
			MethodName: "GetVerseRange",
			Handler:    _BibleService_GetVerseRange_Handler,
		},
		{
			MethodName: "ListAllChaptersOfBookUnary",
			Handler:    _BibleService_ListAllChaptersOfBookUnary_Handler,
		},
		{
			MethodName: "RandomVerseGenerator",
			Handler:    _BibleService_RandomVerseGenerator_Handler,
		},
		{
			MethodName: "VerseOfTheDay",
			Handler:    _BibleService_VerseOfTheDay_Handler,
		},
		{
			MethodName: "GetCurrentReading",
			Handler:    _BibleService_GetCurrentReading_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchByKeyword",
			Handler:       _BibleService_SearchByKeyword_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAllBooks",
			Handler:       _BibleService_ListAllBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAllChaptersOfBook",
			Handler:       _BibleService_ListAllChaptersOfBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAllVersesOfChapter",
			Handler:       _BibleService_ListAllVersesOfChapter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchByTopic",
			Handler:       _BibleService_SearchByTopic_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateReadingPlan",
			Handler:       _BibleService_GenerateReadingPlan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadBible",
			Handler:       _BibleService_DownloadBible_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CompareTranslations",
			Handler:       _BibleService_CompareTranslations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_bible.proto",
}

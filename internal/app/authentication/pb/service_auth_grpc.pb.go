// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: service_auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAuth_CreateUser_FullMethodName              = "/pb.UserAuth/CreateUser"
	UserAuth_LoginUser_FullMethodName               = "/pb.UserAuth/LoginUser"
	UserAuth_RotateToken_FullMethodName             = "/pb.UserAuth/RotateToken"
	UserAuth_ChangePassword_FullMethodName          = "/pb.UserAuth/ChangePassword"
	UserAuth_RequestPasswordReset_FullMethodName    = "/pb.UserAuth/RequestPasswordReset"
	UserAuth_ResetPassword_FullMethodName           = "/pb.UserAuth/ResetPassword"
	UserAuth_InitiateChangeEmail_FullMethodName     = "/pb.UserAuth/InitiateChangeEmail"
	UserAuth_ConfirmChangeEmail_FullMethodName      = "/pb.UserAuth/ConfirmChangeEmail"
	UserAuth_InitiateChangePhone_FullMethodName     = "/pb.UserAuth/InitiateChangePhone"
	UserAuth_ConfirmChangePhone_FullMethodName      = "/pb.UserAuth/ConfirmChangePhone"
	UserAuth_ChangeUsername_FullMethodName          = "/pb.UserAuth/ChangeUsername"
	UserAuth_UploadProfileImage_FullMethodName      = "/pb.UserAuth/UploadProfileImage"
	UserAuth_UpdateProfile_FullMethodName           = "/pb.UserAuth/UpdateProfile"
	UserAuth_UpdateUserProfile_FullMethodName       = "/pb.UserAuth/UpdateUserProfile"
	UserAuth_ResendVerification_FullMethodName      = "/pb.UserAuth/ResendVerification"
	UserAuth_VerifyEmail_FullMethodName             = "/pb.UserAuth/VerifyEmail"
	UserAuth_DeleteAccount_FullMethodName           = "/pb.UserAuth/DeleteAccount"
	UserAuth_RequestAccountRecovery_FullMethodName  = "/pb.UserAuth/RequestAccountRecovery"
	UserAuth_CompleteAccountRecovery_FullMethodName = "/pb.UserAuth/CompleteAccountRecovery"
	UserAuth_RegisterWithSocial_FullMethodName      = "/pb.UserAuth/RegisterWithSocial"
	UserAuth_LoginWithSocial_FullMethodName         = "/pb.UserAuth/LoginWithSocial"
	UserAuth_RegisterMFA_FullMethodName             = "/pb.UserAuth/RegisterMFA"
	UserAuth_VerifyMFAWorks_FullMethodName          = "/pb.UserAuth/VerifyMFAWorks"
	UserAuth_VerifyMFA_FullMethodName               = "/pb.UserAuth/VerifyMFA"
	UserAuth_ByPassMFA_FullMethodName               = "/pb.UserAuth/ByPassMFA"
	UserAuth_UserSuggestions_FullMethodName         = "/pb.UserAuth/UserSuggestions"
	UserAuth_IncreaseTotalCoin_FullMethodName       = "/pb.UserAuth/IncreaseTotalCoin"
)

// UserAuthClient is the client API for UserAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthClient interface {
	// register
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// login
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	// rotate token
	RotateToken(ctx context.Context, in *RotateTokenRequest, opts ...grpc.CallOption) (*RotateTokenResponse, error)
	// Update(change) password
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// Forgot password
	// RPC method to request a password reset.
	RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*RequestPasswordResetResponse, error)
	// RPC method to actually reset the password, using a reset token.
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// Initiate a change email request
	InitiateChangeEmail(ctx context.Context, in *InitiateChangeEmailRequest, opts ...grpc.CallOption) (*InitiateChangeEmailResponse, error)
	// Confirm the change of email
	ConfirmChangeEmail(ctx context.Context, in *ConfirmChangeEmailRequest, opts ...grpc.CallOption) (*ConfirmChangeEmailResponse, error)
	// Initiate a change phone number request
	InitiateChangePhone(ctx context.Context, in *InitiateChangePhoneRequest, opts ...grpc.CallOption) (*InitiateChangePhoneResponse, error)
	// Confirm the change of phone number
	ConfirmChangePhone(ctx context.Context, in *ConfirmChangePhoneRequest, opts ...grpc.CallOption) (*ConfirmChangePhoneResponse, error)
	// Update username
	ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*ChangeUsernameResponse, error)
	// Upload user profile image
	UploadProfileImage(ctx context.Context, opts ...grpc.CallOption) (UserAuth_UploadProfileImageClient, error)
	// update image. Also called after image is uploaded
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	// update image. Also called after image is uploaded
	UpdateUserProfile(ctx context.Context, opts ...grpc.CallOption) (UserAuth_UpdateUserProfileClient, error)
	// RPC to resend email verification.
	ResendVerification(ctx context.Context, in *ResendVerificationRequest, opts ...grpc.CallOption) (*ResendVerificationResponse, error)
	// RPC to verify an email.
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// Deletes a user account, typically this is a soft delete.
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// Initiates the process to recover a deleted account.
	RequestAccountRecovery(ctx context.Context, in *RecoveryRequest, opts ...grpc.CallOption) (*RecoveryResponse, error)
	// Completes the account recovery process.
	CompleteAccountRecovery(ctx context.Context, in *CompleteRecoveryRequest, opts ...grpc.CallOption) (*CompleteRecoveryResponse, error)
	// Register with a social media account.
	RegisterWithSocial(ctx context.Context, in *RegisterWithSocialRequest, opts ...grpc.CallOption) (*RegisterWithSocialResponse, error)
	// Login with a social media account.
	LoginWithSocial(ctx context.Context, in *LoginWithSocialRequest, opts ...grpc.CallOption) (*LoginWithSocialResponse, error)
	// 2factor auth
	// RPC to register a new user for MFA.
	RegisterMFA(ctx context.Context, in *RegisterMFARequest, opts ...grpc.CallOption) (*RegisterMFAResponse, error)
	// RPC to verify a TOTP code during mfa creation.
	VerifyMFAWorks(ctx context.Context, in *VerifyMFAWorksRequest, opts ...grpc.CallOption) (*VerifyMFAWorksResponse, error)
	// RPC to verify a TOTP code during sign-in.
	VerifyMFA(ctx context.Context, in *VerifyMFARequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error)
	// RPC to bypass mfa in case they lose their device
	ByPassMFA(ctx context.Context, in *ByPassOtpRequest, opts ...grpc.CallOption) (*ByPassOtpResponse, error)
	// Suggest users
	UserSuggestions(ctx context.Context, opts ...grpc.CallOption) (UserAuth_UserSuggestionsClient, error)
	// ! move to payments
	IncreaseTotalCoin(ctx context.Context, in *IncreaseTotalCoinRequest, opts ...grpc.CallOption) (*IncreaseTotalCoinResponse, error)
}

type userAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthClient(cc grpc.ClientConnInterface) UserAuthClient {
	return &userAuthClient{cc}
}

func (c *userAuthClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserAuth_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, UserAuth_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) RotateToken(ctx context.Context, in *RotateTokenRequest, opts ...grpc.CallOption) (*RotateTokenResponse, error) {
	out := new(RotateTokenResponse)
	err := c.cc.Invoke(ctx, UserAuth_RotateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, UserAuth_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*RequestPasswordResetResponse, error) {
	out := new(RequestPasswordResetResponse)
	err := c.cc.Invoke(ctx, UserAuth_RequestPasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, UserAuth_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) InitiateChangeEmail(ctx context.Context, in *InitiateChangeEmailRequest, opts ...grpc.CallOption) (*InitiateChangeEmailResponse, error) {
	out := new(InitiateChangeEmailResponse)
	err := c.cc.Invoke(ctx, UserAuth_InitiateChangeEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) ConfirmChangeEmail(ctx context.Context, in *ConfirmChangeEmailRequest, opts ...grpc.CallOption) (*ConfirmChangeEmailResponse, error) {
	out := new(ConfirmChangeEmailResponse)
	err := c.cc.Invoke(ctx, UserAuth_ConfirmChangeEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) InitiateChangePhone(ctx context.Context, in *InitiateChangePhoneRequest, opts ...grpc.CallOption) (*InitiateChangePhoneResponse, error) {
	out := new(InitiateChangePhoneResponse)
	err := c.cc.Invoke(ctx, UserAuth_InitiateChangePhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) ConfirmChangePhone(ctx context.Context, in *ConfirmChangePhoneRequest, opts ...grpc.CallOption) (*ConfirmChangePhoneResponse, error) {
	out := new(ConfirmChangePhoneResponse)
	err := c.cc.Invoke(ctx, UserAuth_ConfirmChangePhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*ChangeUsernameResponse, error) {
	out := new(ChangeUsernameResponse)
	err := c.cc.Invoke(ctx, UserAuth_ChangeUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) UploadProfileImage(ctx context.Context, opts ...grpc.CallOption) (UserAuth_UploadProfileImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserAuth_ServiceDesc.Streams[0], UserAuth_UploadProfileImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userAuthUploadProfileImageClient{stream}
	return x, nil
}

type UserAuth_UploadProfileImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type userAuthUploadProfileImageClient struct {
	grpc.ClientStream
}

func (x *userAuthUploadProfileImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userAuthUploadProfileImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userAuthClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, UserAuth_UpdateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) UpdateUserProfile(ctx context.Context, opts ...grpc.CallOption) (UserAuth_UpdateUserProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserAuth_ServiceDesc.Streams[1], UserAuth_UpdateUserProfile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userAuthUpdateUserProfileClient{stream}
	return x, nil
}

type UserAuth_UpdateUserProfileClient interface {
	Send(*UpdateUserProfileRequest) error
	CloseAndRecv() (*UpdateUserProfileResponse, error)
	grpc.ClientStream
}

type userAuthUpdateUserProfileClient struct {
	grpc.ClientStream
}

func (x *userAuthUpdateUserProfileClient) Send(m *UpdateUserProfileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userAuthUpdateUserProfileClient) CloseAndRecv() (*UpdateUserProfileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateUserProfileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userAuthClient) ResendVerification(ctx context.Context, in *ResendVerificationRequest, opts ...grpc.CallOption) (*ResendVerificationResponse, error) {
	out := new(ResendVerificationResponse)
	err := c.cc.Invoke(ctx, UserAuth_ResendVerification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, UserAuth_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, UserAuth_DeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) RequestAccountRecovery(ctx context.Context, in *RecoveryRequest, opts ...grpc.CallOption) (*RecoveryResponse, error) {
	out := new(RecoveryResponse)
	err := c.cc.Invoke(ctx, UserAuth_RequestAccountRecovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) CompleteAccountRecovery(ctx context.Context, in *CompleteRecoveryRequest, opts ...grpc.CallOption) (*CompleteRecoveryResponse, error) {
	out := new(CompleteRecoveryResponse)
	err := c.cc.Invoke(ctx, UserAuth_CompleteAccountRecovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) RegisterWithSocial(ctx context.Context, in *RegisterWithSocialRequest, opts ...grpc.CallOption) (*RegisterWithSocialResponse, error) {
	out := new(RegisterWithSocialResponse)
	err := c.cc.Invoke(ctx, UserAuth_RegisterWithSocial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) LoginWithSocial(ctx context.Context, in *LoginWithSocialRequest, opts ...grpc.CallOption) (*LoginWithSocialResponse, error) {
	out := new(LoginWithSocialResponse)
	err := c.cc.Invoke(ctx, UserAuth_LoginWithSocial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) RegisterMFA(ctx context.Context, in *RegisterMFARequest, opts ...grpc.CallOption) (*RegisterMFAResponse, error) {
	out := new(RegisterMFAResponse)
	err := c.cc.Invoke(ctx, UserAuth_RegisterMFA_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) VerifyMFAWorks(ctx context.Context, in *VerifyMFAWorksRequest, opts ...grpc.CallOption) (*VerifyMFAWorksResponse, error) {
	out := new(VerifyMFAWorksResponse)
	err := c.cc.Invoke(ctx, UserAuth_VerifyMFAWorks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) VerifyMFA(ctx context.Context, in *VerifyMFARequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error) {
	out := new(VerifyMFAResponse)
	err := c.cc.Invoke(ctx, UserAuth_VerifyMFA_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) ByPassMFA(ctx context.Context, in *ByPassOtpRequest, opts ...grpc.CallOption) (*ByPassOtpResponse, error) {
	out := new(ByPassOtpResponse)
	err := c.cc.Invoke(ctx, UserAuth_ByPassMFA_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) UserSuggestions(ctx context.Context, opts ...grpc.CallOption) (UserAuth_UserSuggestionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserAuth_ServiceDesc.Streams[2], UserAuth_UserSuggestions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userAuthUserSuggestionsClient{stream}
	return x, nil
}

type UserAuth_UserSuggestionsClient interface {
	Send(*UserQuery) error
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userAuthUserSuggestionsClient struct {
	grpc.ClientStream
}

func (x *userAuthUserSuggestionsClient) Send(m *UserQuery) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userAuthUserSuggestionsClient) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userAuthClient) IncreaseTotalCoin(ctx context.Context, in *IncreaseTotalCoinRequest, opts ...grpc.CallOption) (*IncreaseTotalCoinResponse, error) {
	out := new(IncreaseTotalCoinResponse)
	err := c.cc.Invoke(ctx, UserAuth_IncreaseTotalCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServer is the server API for UserAuth service.
// All implementations must embed UnimplementedUserAuthServer
// for forward compatibility
type UserAuthServer interface {
	// register
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// login
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	// rotate token
	RotateToken(context.Context, *RotateTokenRequest) (*RotateTokenResponse, error)
	// Update(change) password
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// Forgot password
	// RPC method to request a password reset.
	RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*RequestPasswordResetResponse, error)
	// RPC method to actually reset the password, using a reset token.
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// Initiate a change email request
	InitiateChangeEmail(context.Context, *InitiateChangeEmailRequest) (*InitiateChangeEmailResponse, error)
	// Confirm the change of email
	ConfirmChangeEmail(context.Context, *ConfirmChangeEmailRequest) (*ConfirmChangeEmailResponse, error)
	// Initiate a change phone number request
	InitiateChangePhone(context.Context, *InitiateChangePhoneRequest) (*InitiateChangePhoneResponse, error)
	// Confirm the change of phone number
	ConfirmChangePhone(context.Context, *ConfirmChangePhoneRequest) (*ConfirmChangePhoneResponse, error)
	// Update username
	ChangeUsername(context.Context, *ChangeUsernameRequest) (*ChangeUsernameResponse, error)
	// Upload user profile image
	UploadProfileImage(UserAuth_UploadProfileImageServer) error
	// update image. Also called after image is uploaded
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	// update image. Also called after image is uploaded
	UpdateUserProfile(UserAuth_UpdateUserProfileServer) error
	// RPC to resend email verification.
	ResendVerification(context.Context, *ResendVerificationRequest) (*ResendVerificationResponse, error)
	// RPC to verify an email.
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// Deletes a user account, typically this is a soft delete.
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// Initiates the process to recover a deleted account.
	RequestAccountRecovery(context.Context, *RecoveryRequest) (*RecoveryResponse, error)
	// Completes the account recovery process.
	CompleteAccountRecovery(context.Context, *CompleteRecoveryRequest) (*CompleteRecoveryResponse, error)
	// Register with a social media account.
	RegisterWithSocial(context.Context, *RegisterWithSocialRequest) (*RegisterWithSocialResponse, error)
	// Login with a social media account.
	LoginWithSocial(context.Context, *LoginWithSocialRequest) (*LoginWithSocialResponse, error)
	// 2factor auth
	// RPC to register a new user for MFA.
	RegisterMFA(context.Context, *RegisterMFARequest) (*RegisterMFAResponse, error)
	// RPC to verify a TOTP code during mfa creation.
	VerifyMFAWorks(context.Context, *VerifyMFAWorksRequest) (*VerifyMFAWorksResponse, error)
	// RPC to verify a TOTP code during sign-in.
	VerifyMFA(context.Context, *VerifyMFARequest) (*VerifyMFAResponse, error)
	// RPC to bypass mfa in case they lose their device
	ByPassMFA(context.Context, *ByPassOtpRequest) (*ByPassOtpResponse, error)
	// Suggest users
	UserSuggestions(UserAuth_UserSuggestionsServer) error
	// ! move to payments
	IncreaseTotalCoin(context.Context, *IncreaseTotalCoinRequest) (*IncreaseTotalCoinResponse, error)
	mustEmbedUnimplementedUserAuthServer()
}

// UnimplementedUserAuthServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthServer struct {
}

func (UnimplementedUserAuthServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserAuthServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserAuthServer) RotateToken(context.Context, *RotateTokenRequest) (*RotateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateToken not implemented")
}
func (UnimplementedUserAuthServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserAuthServer) RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*RequestPasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordReset not implemented")
}
func (UnimplementedUserAuthServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserAuthServer) InitiateChangeEmail(context.Context, *InitiateChangeEmailRequest) (*InitiateChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateChangeEmail not implemented")
}
func (UnimplementedUserAuthServer) ConfirmChangeEmail(context.Context, *ConfirmChangeEmailRequest) (*ConfirmChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmChangeEmail not implemented")
}
func (UnimplementedUserAuthServer) InitiateChangePhone(context.Context, *InitiateChangePhoneRequest) (*InitiateChangePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateChangePhone not implemented")
}
func (UnimplementedUserAuthServer) ConfirmChangePhone(context.Context, *ConfirmChangePhoneRequest) (*ConfirmChangePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmChangePhone not implemented")
}
func (UnimplementedUserAuthServer) ChangeUsername(context.Context, *ChangeUsernameRequest) (*ChangeUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUsername not implemented")
}
func (UnimplementedUserAuthServer) UploadProfileImage(UserAuth_UploadProfileImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadProfileImage not implemented")
}
func (UnimplementedUserAuthServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedUserAuthServer) UpdateUserProfile(UserAuth_UpdateUserProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserAuthServer) ResendVerification(context.Context, *ResendVerificationRequest) (*ResendVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerification not implemented")
}
func (UnimplementedUserAuthServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedUserAuthServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedUserAuthServer) RequestAccountRecovery(context.Context, *RecoveryRequest) (*RecoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccountRecovery not implemented")
}
func (UnimplementedUserAuthServer) CompleteAccountRecovery(context.Context, *CompleteRecoveryRequest) (*CompleteRecoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAccountRecovery not implemented")
}
func (UnimplementedUserAuthServer) RegisterWithSocial(context.Context, *RegisterWithSocialRequest) (*RegisterWithSocialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWithSocial not implemented")
}
func (UnimplementedUserAuthServer) LoginWithSocial(context.Context, *LoginWithSocialRequest) (*LoginWithSocialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithSocial not implemented")
}
func (UnimplementedUserAuthServer) RegisterMFA(context.Context, *RegisterMFARequest) (*RegisterMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMFA not implemented")
}
func (UnimplementedUserAuthServer) VerifyMFAWorks(context.Context, *VerifyMFAWorksRequest) (*VerifyMFAWorksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMFAWorks not implemented")
}
func (UnimplementedUserAuthServer) VerifyMFA(context.Context, *VerifyMFARequest) (*VerifyMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMFA not implemented")
}
func (UnimplementedUserAuthServer) ByPassMFA(context.Context, *ByPassOtpRequest) (*ByPassOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByPassMFA not implemented")
}
func (UnimplementedUserAuthServer) UserSuggestions(UserAuth_UserSuggestionsServer) error {
	return status.Errorf(codes.Unimplemented, "method UserSuggestions not implemented")
}
func (UnimplementedUserAuthServer) IncreaseTotalCoin(context.Context, *IncreaseTotalCoinRequest) (*IncreaseTotalCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseTotalCoin not implemented")
}
func (UnimplementedUserAuthServer) mustEmbedUnimplementedUserAuthServer() {}

// UnsafeUserAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthServer will
// result in compilation errors.
type UnsafeUserAuthServer interface {
	mustEmbedUnimplementedUserAuthServer()
}

func RegisterUserAuthServer(s grpc.ServiceRegistrar, srv UserAuthServer) {
	s.RegisterService(&UserAuth_ServiceDesc, srv)
}

func _UserAuth_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_RotateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).RotateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_RotateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).RotateToken(ctx, req.(*RotateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_RequestPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).RequestPasswordReset(ctx, req.(*RequestPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_InitiateChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).InitiateChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_InitiateChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).InitiateChangeEmail(ctx, req.(*InitiateChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_ConfirmChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).ConfirmChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_ConfirmChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).ConfirmChangeEmail(ctx, req.(*ConfirmChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_InitiateChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateChangePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).InitiateChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_InitiateChangePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).InitiateChangePhone(ctx, req.(*InitiateChangePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_ConfirmChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmChangePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).ConfirmChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_ConfirmChangePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).ConfirmChangePhone(ctx, req.(*ConfirmChangePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_ChangeUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).ChangeUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_ChangeUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).ChangeUsername(ctx, req.(*ChangeUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_UploadProfileImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserAuthServer).UploadProfileImage(&userAuthUploadProfileImageServer{stream})
}

type UserAuth_UploadProfileImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type userAuthUploadProfileImageServer struct {
	grpc.ServerStream
}

func (x *userAuthUploadProfileImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userAuthUploadProfileImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserAuth_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_UpdateUserProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserAuthServer).UpdateUserProfile(&userAuthUpdateUserProfileServer{stream})
}

type UserAuth_UpdateUserProfileServer interface {
	SendAndClose(*UpdateUserProfileResponse) error
	Recv() (*UpdateUserProfileRequest, error)
	grpc.ServerStream
}

type userAuthUpdateUserProfileServer struct {
	grpc.ServerStream
}

func (x *userAuthUpdateUserProfileServer) SendAndClose(m *UpdateUserProfileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userAuthUpdateUserProfileServer) Recv() (*UpdateUserProfileRequest, error) {
	m := new(UpdateUserProfileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserAuth_ResendVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).ResendVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_ResendVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).ResendVerification(ctx, req.(*ResendVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_RequestAccountRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).RequestAccountRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_RequestAccountRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).RequestAccountRecovery(ctx, req.(*RecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_CompleteAccountRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).CompleteAccountRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_CompleteAccountRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).CompleteAccountRecovery(ctx, req.(*CompleteRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_RegisterWithSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWithSocialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).RegisterWithSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_RegisterWithSocial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).RegisterWithSocial(ctx, req.(*RegisterWithSocialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_LoginWithSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithSocialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).LoginWithSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_LoginWithSocial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).LoginWithSocial(ctx, req.(*LoginWithSocialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_RegisterMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).RegisterMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_RegisterMFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).RegisterMFA(ctx, req.(*RegisterMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_VerifyMFAWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMFAWorksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).VerifyMFAWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_VerifyMFAWorks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).VerifyMFAWorks(ctx, req.(*VerifyMFAWorksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_VerifyMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).VerifyMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_VerifyMFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).VerifyMFA(ctx, req.(*VerifyMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_ByPassMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByPassOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).ByPassMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_ByPassMFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).ByPassMFA(ctx, req.(*ByPassOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_UserSuggestions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserAuthServer).UserSuggestions(&userAuthUserSuggestionsServer{stream})
}

type UserAuth_UserSuggestionsServer interface {
	Send(*UserResponse) error
	Recv() (*UserQuery, error)
	grpc.ServerStream
}

type userAuthUserSuggestionsServer struct {
	grpc.ServerStream
}

func (x *userAuthUserSuggestionsServer) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userAuthUserSuggestionsServer) Recv() (*UserQuery, error) {
	m := new(UserQuery)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserAuth_IncreaseTotalCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseTotalCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).IncreaseTotalCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_IncreaseTotalCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).IncreaseTotalCoin(ctx, req.(*IncreaseTotalCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuth_ServiceDesc is the grpc.ServiceDesc for UserAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserAuth",
	HandlerType: (*UserAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserAuth_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserAuth_LoginUser_Handler,
		},
		{
			MethodName: "RotateToken",
			Handler:    _UserAuth_RotateToken_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserAuth_ChangePassword_Handler,
		},
		{
			MethodName: "RequestPasswordReset",
			Handler:    _UserAuth_RequestPasswordReset_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserAuth_ResetPassword_Handler,
		},
		{
			MethodName: "InitiateChangeEmail",
			Handler:    _UserAuth_InitiateChangeEmail_Handler,
		},
		{
			MethodName: "ConfirmChangeEmail",
			Handler:    _UserAuth_ConfirmChangeEmail_Handler,
		},
		{
			MethodName: "InitiateChangePhone",
			Handler:    _UserAuth_InitiateChangePhone_Handler,
		},
		{
			MethodName: "ConfirmChangePhone",
			Handler:    _UserAuth_ConfirmChangePhone_Handler,
		},
		{
			MethodName: "ChangeUsername",
			Handler:    _UserAuth_ChangeUsername_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UserAuth_UpdateProfile_Handler,
		},
		{
			MethodName: "ResendVerification",
			Handler:    _UserAuth_ResendVerification_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _UserAuth_VerifyEmail_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _UserAuth_DeleteAccount_Handler,
		},
		{
			MethodName: "RequestAccountRecovery",
			Handler:    _UserAuth_RequestAccountRecovery_Handler,
		},
		{
			MethodName: "CompleteAccountRecovery",
			Handler:    _UserAuth_CompleteAccountRecovery_Handler,
		},
		{
			MethodName: "RegisterWithSocial",
			Handler:    _UserAuth_RegisterWithSocial_Handler,
		},
		{
			MethodName: "LoginWithSocial",
			Handler:    _UserAuth_LoginWithSocial_Handler,
		},
		{
			MethodName: "RegisterMFA",
			Handler:    _UserAuth_RegisterMFA_Handler,
		},
		{
			MethodName: "VerifyMFAWorks",
			Handler:    _UserAuth_VerifyMFAWorks_Handler,
		},
		{
			MethodName: "VerifyMFA",
			Handler:    _UserAuth_VerifyMFA_Handler,
		},
		{
			MethodName: "ByPassMFA",
			Handler:    _UserAuth_ByPassMFA_Handler,
		},
		{
			MethodName: "IncreaseTotalCoin",
			Handler:    _UserAuth_IncreaseTotalCoin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadProfileImage",
			Handler:       _UserAuth_UploadProfileImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateUserProfile",
			Handler:       _UserAuth_UpdateUserProfile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UserSuggestions",
			Handler:       _UserAuth_UserSuggestions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service_auth.proto",
}

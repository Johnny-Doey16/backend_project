// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: service_church.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChurchService_AddDenomination_FullMethodName              = "/pb.ChurchService/AddDenomination"
	ChurchService_GetDenominationList_FullMethodName          = "/pb.ChurchService/GetDenominationList"
	ChurchService_CreateChurch_FullMethodName                 = "/pb.ChurchService/CreateChurch"
	ChurchService_ChangeDenominationMembership_FullMethodName = "/pb.ChurchService/ChangeDenominationMembership"
	ChurchService_ChangeChurchMembership_FullMethodName       = "/pb.ChurchService/ChangeChurchMembership"
	ChurchService_SearchChurches_FullMethodName               = "/pb.ChurchService/SearchChurches"
	ChurchService_SearchNearbyChurches_FullMethodName         = "/pb.ChurchService/SearchNearbyChurches"
	ChurchService_SelectDenomination_FullMethodName           = "/pb.ChurchService/SelectDenomination"
	ChurchService_GetChurchProfile_FullMethodName             = "/pb.ChurchService/GetChurchProfile"
	ChurchService_GetUserChurch_FullMethodName                = "/pb.ChurchService/GetUserChurch"
	ChurchService_GetChurchMembers_FullMethodName             = "/pb.ChurchService/GetChurchMembers"
	ChurchService_CreateProject_FullMethodName                = "/pb.ChurchService/CreateProject"
	ChurchService_UpdateProject_FullMethodName                = "/pb.ChurchService/UpdateProject"
	ChurchService_MarkProjectCompleted_FullMethodName         = "/pb.ChurchService/MarkProjectCompleted"
	ChurchService_GetChurchProjects_FullMethodName            = "/pb.ChurchService/GetChurchProjects"
	ChurchService_CreateProjectDonate_FullMethodName          = "/pb.ChurchService/CreateProjectDonate"
	ChurchService_GetProjectDetails_FullMethodName            = "/pb.ChurchService/GetProjectDetails"
	ChurchService_GetProjectContributors_FullMethodName       = "/pb.ChurchService/GetProjectContributors"
	ChurchService_CreateAnnouncement_FullMethodName           = "/pb.ChurchService/CreateAnnouncement"
	ChurchService_GetChurchAnnouncements_FullMethodName       = "/pb.ChurchService/GetChurchAnnouncements"
	ChurchService_GetAnnouncementsForUser_FullMethodName      = "/pb.ChurchService/GetAnnouncementsForUser"
	ChurchService_UpdateChurchAccountDetails_FullMethodName   = "/pb.ChurchService/UpdateChurchAccountDetails"
	ChurchService_CreateProgram_FullMethodName                = "/pb.ChurchService/CreateProgram"
	ChurchService_GetChurchPrograms_FullMethodName            = "/pb.ChurchService/GetChurchPrograms"
	ChurchService_EditChurchProgram_FullMethodName            = "/pb.ChurchService/EditChurchProgram"
	ChurchService_DeleteChurchProgram_FullMethodName          = "/pb.ChurchService/DeleteChurchProgram"
	ChurchService_CreateGroup_FullMethodName                  = "/pb.ChurchService/CreateGroup"
	ChurchService_GetGroup_FullMethodName                     = "/pb.ChurchService/GetGroup"
	ChurchService_UpdateGroup_FullMethodName                  = "/pb.ChurchService/UpdateGroup"
	ChurchService_DeleteGroup_FullMethodName                  = "/pb.ChurchService/DeleteGroup"
	ChurchService_ListGroups_FullMethodName                   = "/pb.ChurchService/ListGroups"
	ChurchService_CreateMembership_FullMethodName             = "/pb.ChurchService/CreateMembership"
	ChurchService_GetMembership_FullMethodName                = "/pb.ChurchService/GetMembership"
	ChurchService_UpdateMembership_FullMethodName             = "/pb.ChurchService/UpdateMembership"
	ChurchService_DeleteMembership_FullMethodName             = "/pb.ChurchService/DeleteMembership"
	ChurchService_ListMemberships_FullMethodName              = "/pb.ChurchService/ListMemberships"
	ChurchService_CreateGroupForum_FullMethodName             = "/pb.ChurchService/CreateGroupForum"
	ChurchService_GetGroupForum_FullMethodName                = "/pb.ChurchService/GetGroupForum"
	ChurchService_UpdateGroupForum_FullMethodName             = "/pb.ChurchService/UpdateGroupForum"
	ChurchService_DeleteGroupForum_FullMethodName             = "/pb.ChurchService/DeleteGroupForum"
	ChurchService_ListGroupForums_FullMethodName              = "/pb.ChurchService/ListGroupForums"
	ChurchService_CreateOrganization_FullMethodName           = "/pb.ChurchService/CreateOrganization"
	ChurchService_GetOrganization_FullMethodName              = "/pb.ChurchService/GetOrganization"
	ChurchService_UpdateOrganization_FullMethodName           = "/pb.ChurchService/UpdateOrganization"
	ChurchService_DeleteOrganization_FullMethodName           = "/pb.ChurchService/DeleteOrganization"
	ChurchService_ListOrganizations_FullMethodName            = "/pb.ChurchService/ListOrganizations"
	ChurchService_CreateOrganizationMembership_FullMethodName = "/pb.ChurchService/CreateOrganizationMembership"
	ChurchService_GetOrganizationMembership_FullMethodName    = "/pb.ChurchService/GetOrganizationMembership"
	ChurchService_UpdateOrganizationMembership_FullMethodName = "/pb.ChurchService/UpdateOrganizationMembership"
	ChurchService_DeleteOrganizationMembership_FullMethodName = "/pb.ChurchService/DeleteOrganizationMembership"
	ChurchService_ListOrganizationMemberships_FullMethodName  = "/pb.ChurchService/ListOrganizationMemberships"
	ChurchService_CreateOrganizationForum_FullMethodName      = "/pb.ChurchService/CreateOrganizationForum"
	ChurchService_GetOrganizationForum_FullMethodName         = "/pb.ChurchService/GetOrganizationForum"
	ChurchService_UpdateOrganizationForum_FullMethodName      = "/pb.ChurchService/UpdateOrganizationForum"
	ChurchService_DeleteOrganizationForum_FullMethodName      = "/pb.ChurchService/DeleteOrganizationForum"
	ChurchService_ListOrganizationForums_FullMethodName       = "/pb.ChurchService/ListOrganizationForums"
)

// ChurchServiceClient is the client API for ChurchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChurchServiceClient interface {
	AddDenomination(ctx context.Context, in *AddDenominationRequest, opts ...grpc.CallOption) (*AddDenominationResponse, error)
	GetDenominationList(ctx context.Context, in *GetDenominationRequest, opts ...grpc.CallOption) (*GetDenominationResponse, error)
	// Register a new church
	CreateChurch(ctx context.Context, in *Church, opts ...grpc.CallOption) (*CreateChurchResponse, error)
	// Join or leave a denomination
	ChangeDenominationMembership(ctx context.Context, in *MembershipChangeRequest, opts ...grpc.CallOption) (*MembershipChangeResponse, error)
	// Join or leave a church
	ChangeChurchMembership(ctx context.Context, in *MembershipChangeRequest, opts ...grpc.CallOption) (*MembershipChangeResponse, error)
	// Search for churches
	SearchChurches(ctx context.Context, in *SearchRequestChurch, opts ...grpc.CallOption) (*SearchChurchResponse, error)
	// Search nearby churches
	SearchNearbyChurches(ctx context.Context, in *SearchRequestChurch, opts ...grpc.CallOption) (ChurchService_SearchNearbyChurchesClient, error)
	// Select a denomination to join
	SelectDenomination(ctx context.Context, in *MembershipChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Search nearby churches
	GetChurchProfile(ctx context.Context, in *GetChurchProfileRequest, opts ...grpc.CallOption) (*GetChurchProfileResponse, error)
	// Get church the current user belongs to
	GetUserChurch(ctx context.Context, in *GetUserChurchRequest, opts ...grpc.CallOption) (*GetUserChurchResponse, error)
	GetChurchMembers(ctx context.Context, in *GetChurchMembersRequest, opts ...grpc.CallOption) (ChurchService_GetChurchMembersClient, error)
	// ! Church projects
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	MarkProjectCompleted(ctx context.Context, in *MarkProjectCompletedRequest, opts ...grpc.CallOption) (*MarkProjectCompletedResponse, error)
	GetChurchProjects(ctx context.Context, in *GetChurchProjectsRequest, opts ...grpc.CallOption) (ChurchService_GetChurchProjectsClient, error)
	CreateProjectDonate(ctx context.Context, in *ProjectDonationRequest, opts ...grpc.CallOption) (*ProjectDonateResponse, error)
	GetProjectDetails(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (*ChurchProject, error)
	GetProjectContributors(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (ChurchService_GetProjectContributorsClient, error)
	// ! Church Announcements
	CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementResponse, error)
	GetChurchAnnouncements(ctx context.Context, in *GetChurchAnnouncementsRequest, opts ...grpc.CallOption) (ChurchService_GetChurchAnnouncementsClient, error)
	GetAnnouncementsForUser(ctx context.Context, in *GetAnnouncementsForUserRequest, opts ...grpc.CallOption) (ChurchService_GetAnnouncementsForUserClient, error)
	UpdateChurchAccountDetails(ctx context.Context, in *UpdateAccountDetailsRequest, opts ...grpc.CallOption) (*UpdateAccountDetailsResponse, error)
	// Church programs
	CreateProgram(ctx context.Context, in *CreateChurchProgramRequest, opts ...grpc.CallOption) (*CreateChurchProgramResponse, error)
	GetChurchPrograms(ctx context.Context, in *GetChurchProgramsRequest, opts ...grpc.CallOption) (ChurchService_GetChurchProgramsClient, error)
	EditChurchProgram(ctx context.Context, in *CreateChurchProgramRequest, opts ...grpc.CallOption) (*CreateChurchProgramResponse, error)
	DeleteChurchProgram(ctx context.Context, in *DeleteChurchProgramRequest, opts ...grpc.CallOption) (*CreateChurchProgramResponse, error)
	// TODO: UNDONE
	// Group service
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	GetGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*Group, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GroupList, error)
	// UserGroupMembership service
	CreateMembership(ctx context.Context, in *UserGroupMembership, opts ...grpc.CallOption) (*UserGroupMembership, error)
	GetMembership(ctx context.Context, in *GroupMembershipId, opts ...grpc.CallOption) (*UserGroupMembership, error)
	UpdateMembership(ctx context.Context, in *UserGroupMembership, opts ...grpc.CallOption) (*UserGroupMembership, error)
	DeleteMembership(ctx context.Context, in *GroupMembershipId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMemberships(ctx context.Context, in *GroupMembershipId, opts ...grpc.CallOption) (*UserGroupMembershipList, error)
	// GroupForums service
	CreateGroupForum(ctx context.Context, in *GroupForum, opts ...grpc.CallOption) (*GroupForum, error)
	GetGroupForum(ctx context.Context, in *GroupForumId, opts ...grpc.CallOption) (*GroupForum, error)
	UpdateGroupForum(ctx context.Context, in *GroupForum, opts ...grpc.CallOption) (*GroupForum, error)
	DeleteGroupForum(ctx context.Context, in *GroupForumId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListGroupForums(ctx context.Context, in *GroupForumId, opts ...grpc.CallOption) (*GroupForumList, error)
	// Organization service
	CreateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	GetOrganization(ctx context.Context, in *OrganizationId, opts ...grpc.CallOption) (*Organization, error)
	UpdateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	DeleteOrganization(ctx context.Context, in *OrganizationId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListOrganizations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrganizationList, error)
	// UserOrganizationMembership service
	CreateOrganizationMembership(ctx context.Context, in *UserOrganizationMembership, opts ...grpc.CallOption) (*UserOrganizationMembership, error)
	GetOrganizationMembership(ctx context.Context, in *OrganizationMembershipId, opts ...grpc.CallOption) (*UserOrganizationMembership, error)
	UpdateOrganizationMembership(ctx context.Context, in *UserOrganizationMembership, opts ...grpc.CallOption) (*UserOrganizationMembership, error)
	DeleteOrganizationMembership(ctx context.Context, in *OrganizationMembershipId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListOrganizationMemberships(ctx context.Context, in *OrganizationMembershipId, opts ...grpc.CallOption) (*UserOrganizationMembershipList, error)
	// OrganizationForums service
	CreateOrganizationForum(ctx context.Context, in *OrganizationForum, opts ...grpc.CallOption) (*OrganizationForum, error)
	GetOrganizationForum(ctx context.Context, in *OrganizationForumId, opts ...grpc.CallOption) (*OrganizationForum, error)
	UpdateOrganizationForum(ctx context.Context, in *OrganizationForum, opts ...grpc.CallOption) (*OrganizationForum, error)
	DeleteOrganizationForum(ctx context.Context, in *OrganizationForumId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListOrganizationForums(ctx context.Context, in *OrganizationForumId, opts ...grpc.CallOption) (*OrganizationForumList, error)
}

type churchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChurchServiceClient(cc grpc.ClientConnInterface) ChurchServiceClient {
	return &churchServiceClient{cc}
}

func (c *churchServiceClient) AddDenomination(ctx context.Context, in *AddDenominationRequest, opts ...grpc.CallOption) (*AddDenominationResponse, error) {
	out := new(AddDenominationResponse)
	err := c.cc.Invoke(ctx, ChurchService_AddDenomination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetDenominationList(ctx context.Context, in *GetDenominationRequest, opts ...grpc.CallOption) (*GetDenominationResponse, error) {
	out := new(GetDenominationResponse)
	err := c.cc.Invoke(ctx, ChurchService_GetDenominationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) CreateChurch(ctx context.Context, in *Church, opts ...grpc.CallOption) (*CreateChurchResponse, error) {
	out := new(CreateChurchResponse)
	err := c.cc.Invoke(ctx, ChurchService_CreateChurch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) ChangeDenominationMembership(ctx context.Context, in *MembershipChangeRequest, opts ...grpc.CallOption) (*MembershipChangeResponse, error) {
	out := new(MembershipChangeResponse)
	err := c.cc.Invoke(ctx, ChurchService_ChangeDenominationMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) ChangeChurchMembership(ctx context.Context, in *MembershipChangeRequest, opts ...grpc.CallOption) (*MembershipChangeResponse, error) {
	out := new(MembershipChangeResponse)
	err := c.cc.Invoke(ctx, ChurchService_ChangeChurchMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) SearchChurches(ctx context.Context, in *SearchRequestChurch, opts ...grpc.CallOption) (*SearchChurchResponse, error) {
	out := new(SearchChurchResponse)
	err := c.cc.Invoke(ctx, ChurchService_SearchChurches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) SearchNearbyChurches(ctx context.Context, in *SearchRequestChurch, opts ...grpc.CallOption) (ChurchService_SearchNearbyChurchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChurchService_ServiceDesc.Streams[0], ChurchService_SearchNearbyChurches_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &churchServiceSearchNearbyChurchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChurchService_SearchNearbyChurchesClient interface {
	Recv() (*Church, error)
	grpc.ClientStream
}

type churchServiceSearchNearbyChurchesClient struct {
	grpc.ClientStream
}

func (x *churchServiceSearchNearbyChurchesClient) Recv() (*Church, error) {
	m := new(Church)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *churchServiceClient) SelectDenomination(ctx context.Context, in *MembershipChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChurchService_SelectDenomination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetChurchProfile(ctx context.Context, in *GetChurchProfileRequest, opts ...grpc.CallOption) (*GetChurchProfileResponse, error) {
	out := new(GetChurchProfileResponse)
	err := c.cc.Invoke(ctx, ChurchService_GetChurchProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetUserChurch(ctx context.Context, in *GetUserChurchRequest, opts ...grpc.CallOption) (*GetUserChurchResponse, error) {
	out := new(GetUserChurchResponse)
	err := c.cc.Invoke(ctx, ChurchService_GetUserChurch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetChurchMembers(ctx context.Context, in *GetChurchMembersRequest, opts ...grpc.CallOption) (ChurchService_GetChurchMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChurchService_ServiceDesc.Streams[1], ChurchService_GetChurchMembers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &churchServiceGetChurchMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChurchService_GetChurchMembersClient interface {
	Recv() (*GetChurchMembersResponse, error)
	grpc.ClientStream
}

type churchServiceGetChurchMembersClient struct {
	grpc.ClientStream
}

func (x *churchServiceGetChurchMembersClient) Recv() (*GetChurchMembersResponse, error) {
	m := new(GetChurchMembersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *churchServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, ChurchService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, ChurchService_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) MarkProjectCompleted(ctx context.Context, in *MarkProjectCompletedRequest, opts ...grpc.CallOption) (*MarkProjectCompletedResponse, error) {
	out := new(MarkProjectCompletedResponse)
	err := c.cc.Invoke(ctx, ChurchService_MarkProjectCompleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetChurchProjects(ctx context.Context, in *GetChurchProjectsRequest, opts ...grpc.CallOption) (ChurchService_GetChurchProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChurchService_ServiceDesc.Streams[2], ChurchService_GetChurchProjects_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &churchServiceGetChurchProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChurchService_GetChurchProjectsClient interface {
	Recv() (*GetChurchProjectsResponse, error)
	grpc.ClientStream
}

type churchServiceGetChurchProjectsClient struct {
	grpc.ClientStream
}

func (x *churchServiceGetChurchProjectsClient) Recv() (*GetChurchProjectsResponse, error) {
	m := new(GetChurchProjectsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *churchServiceClient) CreateProjectDonate(ctx context.Context, in *ProjectDonationRequest, opts ...grpc.CallOption) (*ProjectDonateResponse, error) {
	out := new(ProjectDonateResponse)
	err := c.cc.Invoke(ctx, ChurchService_CreateProjectDonate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetProjectDetails(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (*ChurchProject, error) {
	out := new(ChurchProject)
	err := c.cc.Invoke(ctx, ChurchService_GetProjectDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetProjectContributors(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (ChurchService_GetProjectContributorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChurchService_ServiceDesc.Streams[3], ChurchService_GetProjectContributors_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &churchServiceGetProjectContributorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChurchService_GetProjectContributorsClient interface {
	Recv() (*ProjectContributor, error)
	grpc.ClientStream
}

type churchServiceGetProjectContributorsClient struct {
	grpc.ClientStream
}

func (x *churchServiceGetProjectContributorsClient) Recv() (*ProjectContributor, error) {
	m := new(ProjectContributor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *churchServiceClient) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementResponse, error) {
	out := new(CreateAnnouncementResponse)
	err := c.cc.Invoke(ctx, ChurchService_CreateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetChurchAnnouncements(ctx context.Context, in *GetChurchAnnouncementsRequest, opts ...grpc.CallOption) (ChurchService_GetChurchAnnouncementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChurchService_ServiceDesc.Streams[4], ChurchService_GetChurchAnnouncements_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &churchServiceGetChurchAnnouncementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChurchService_GetChurchAnnouncementsClient interface {
	Recv() (*GetAnnouncementsResponse, error)
	grpc.ClientStream
}

type churchServiceGetChurchAnnouncementsClient struct {
	grpc.ClientStream
}

func (x *churchServiceGetChurchAnnouncementsClient) Recv() (*GetAnnouncementsResponse, error) {
	m := new(GetAnnouncementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *churchServiceClient) GetAnnouncementsForUser(ctx context.Context, in *GetAnnouncementsForUserRequest, opts ...grpc.CallOption) (ChurchService_GetAnnouncementsForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChurchService_ServiceDesc.Streams[5], ChurchService_GetAnnouncementsForUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &churchServiceGetAnnouncementsForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChurchService_GetAnnouncementsForUserClient interface {
	Recv() (*GetAnnouncementsResponse, error)
	grpc.ClientStream
}

type churchServiceGetAnnouncementsForUserClient struct {
	grpc.ClientStream
}

func (x *churchServiceGetAnnouncementsForUserClient) Recv() (*GetAnnouncementsResponse, error) {
	m := new(GetAnnouncementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *churchServiceClient) UpdateChurchAccountDetails(ctx context.Context, in *UpdateAccountDetailsRequest, opts ...grpc.CallOption) (*UpdateAccountDetailsResponse, error) {
	out := new(UpdateAccountDetailsResponse)
	err := c.cc.Invoke(ctx, ChurchService_UpdateChurchAccountDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) CreateProgram(ctx context.Context, in *CreateChurchProgramRequest, opts ...grpc.CallOption) (*CreateChurchProgramResponse, error) {
	out := new(CreateChurchProgramResponse)
	err := c.cc.Invoke(ctx, ChurchService_CreateProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetChurchPrograms(ctx context.Context, in *GetChurchProgramsRequest, opts ...grpc.CallOption) (ChurchService_GetChurchProgramsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChurchService_ServiceDesc.Streams[6], ChurchService_GetChurchPrograms_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &churchServiceGetChurchProgramsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChurchService_GetChurchProgramsClient interface {
	Recv() (*GetChurchProgramsResponse, error)
	grpc.ClientStream
}

type churchServiceGetChurchProgramsClient struct {
	grpc.ClientStream
}

func (x *churchServiceGetChurchProgramsClient) Recv() (*GetChurchProgramsResponse, error) {
	m := new(GetChurchProgramsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *churchServiceClient) EditChurchProgram(ctx context.Context, in *CreateChurchProgramRequest, opts ...grpc.CallOption) (*CreateChurchProgramResponse, error) {
	out := new(CreateChurchProgramResponse)
	err := c.cc.Invoke(ctx, ChurchService_EditChurchProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) DeleteChurchProgram(ctx context.Context, in *DeleteChurchProgramRequest, opts ...grpc.CallOption) (*CreateChurchProgramResponse, error) {
	out := new(CreateChurchProgramResponse)
	err := c.cc.Invoke(ctx, ChurchService_DeleteChurchProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, ChurchService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, ChurchService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, ChurchService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) DeleteGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChurchService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) ListGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := c.cc.Invoke(ctx, ChurchService_ListGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) CreateMembership(ctx context.Context, in *UserGroupMembership, opts ...grpc.CallOption) (*UserGroupMembership, error) {
	out := new(UserGroupMembership)
	err := c.cc.Invoke(ctx, ChurchService_CreateMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetMembership(ctx context.Context, in *GroupMembershipId, opts ...grpc.CallOption) (*UserGroupMembership, error) {
	out := new(UserGroupMembership)
	err := c.cc.Invoke(ctx, ChurchService_GetMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) UpdateMembership(ctx context.Context, in *UserGroupMembership, opts ...grpc.CallOption) (*UserGroupMembership, error) {
	out := new(UserGroupMembership)
	err := c.cc.Invoke(ctx, ChurchService_UpdateMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) DeleteMembership(ctx context.Context, in *GroupMembershipId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChurchService_DeleteMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) ListMemberships(ctx context.Context, in *GroupMembershipId, opts ...grpc.CallOption) (*UserGroupMembershipList, error) {
	out := new(UserGroupMembershipList)
	err := c.cc.Invoke(ctx, ChurchService_ListMemberships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) CreateGroupForum(ctx context.Context, in *GroupForum, opts ...grpc.CallOption) (*GroupForum, error) {
	out := new(GroupForum)
	err := c.cc.Invoke(ctx, ChurchService_CreateGroupForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetGroupForum(ctx context.Context, in *GroupForumId, opts ...grpc.CallOption) (*GroupForum, error) {
	out := new(GroupForum)
	err := c.cc.Invoke(ctx, ChurchService_GetGroupForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) UpdateGroupForum(ctx context.Context, in *GroupForum, opts ...grpc.CallOption) (*GroupForum, error) {
	out := new(GroupForum)
	err := c.cc.Invoke(ctx, ChurchService_UpdateGroupForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) DeleteGroupForum(ctx context.Context, in *GroupForumId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChurchService_DeleteGroupForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) ListGroupForums(ctx context.Context, in *GroupForumId, opts ...grpc.CallOption) (*GroupForumList, error) {
	out := new(GroupForumList)
	err := c.cc.Invoke(ctx, ChurchService_ListGroupForums_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) CreateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, ChurchService_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetOrganization(ctx context.Context, in *OrganizationId, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, ChurchService_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) UpdateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, ChurchService_UpdateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) DeleteOrganization(ctx context.Context, in *OrganizationId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChurchService_DeleteOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) ListOrganizations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrganizationList, error) {
	out := new(OrganizationList)
	err := c.cc.Invoke(ctx, ChurchService_ListOrganizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) CreateOrganizationMembership(ctx context.Context, in *UserOrganizationMembership, opts ...grpc.CallOption) (*UserOrganizationMembership, error) {
	out := new(UserOrganizationMembership)
	err := c.cc.Invoke(ctx, ChurchService_CreateOrganizationMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetOrganizationMembership(ctx context.Context, in *OrganizationMembershipId, opts ...grpc.CallOption) (*UserOrganizationMembership, error) {
	out := new(UserOrganizationMembership)
	err := c.cc.Invoke(ctx, ChurchService_GetOrganizationMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) UpdateOrganizationMembership(ctx context.Context, in *UserOrganizationMembership, opts ...grpc.CallOption) (*UserOrganizationMembership, error) {
	out := new(UserOrganizationMembership)
	err := c.cc.Invoke(ctx, ChurchService_UpdateOrganizationMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) DeleteOrganizationMembership(ctx context.Context, in *OrganizationMembershipId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChurchService_DeleteOrganizationMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) ListOrganizationMemberships(ctx context.Context, in *OrganizationMembershipId, opts ...grpc.CallOption) (*UserOrganizationMembershipList, error) {
	out := new(UserOrganizationMembershipList)
	err := c.cc.Invoke(ctx, ChurchService_ListOrganizationMemberships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) CreateOrganizationForum(ctx context.Context, in *OrganizationForum, opts ...grpc.CallOption) (*OrganizationForum, error) {
	out := new(OrganizationForum)
	err := c.cc.Invoke(ctx, ChurchService_CreateOrganizationForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) GetOrganizationForum(ctx context.Context, in *OrganizationForumId, opts ...grpc.CallOption) (*OrganizationForum, error) {
	out := new(OrganizationForum)
	err := c.cc.Invoke(ctx, ChurchService_GetOrganizationForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) UpdateOrganizationForum(ctx context.Context, in *OrganizationForum, opts ...grpc.CallOption) (*OrganizationForum, error) {
	out := new(OrganizationForum)
	err := c.cc.Invoke(ctx, ChurchService_UpdateOrganizationForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) DeleteOrganizationForum(ctx context.Context, in *OrganizationForumId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChurchService_DeleteOrganizationForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *churchServiceClient) ListOrganizationForums(ctx context.Context, in *OrganizationForumId, opts ...grpc.CallOption) (*OrganizationForumList, error) {
	out := new(OrganizationForumList)
	err := c.cc.Invoke(ctx, ChurchService_ListOrganizationForums_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChurchServiceServer is the server API for ChurchService service.
// All implementations must embed UnimplementedChurchServiceServer
// for forward compatibility
type ChurchServiceServer interface {
	AddDenomination(context.Context, *AddDenominationRequest) (*AddDenominationResponse, error)
	GetDenominationList(context.Context, *GetDenominationRequest) (*GetDenominationResponse, error)
	// Register a new church
	CreateChurch(context.Context, *Church) (*CreateChurchResponse, error)
	// Join or leave a denomination
	ChangeDenominationMembership(context.Context, *MembershipChangeRequest) (*MembershipChangeResponse, error)
	// Join or leave a church
	ChangeChurchMembership(context.Context, *MembershipChangeRequest) (*MembershipChangeResponse, error)
	// Search for churches
	SearchChurches(context.Context, *SearchRequestChurch) (*SearchChurchResponse, error)
	// Search nearby churches
	SearchNearbyChurches(*SearchRequestChurch, ChurchService_SearchNearbyChurchesServer) error
	// Select a denomination to join
	SelectDenomination(context.Context, *MembershipChangeRequest) (*emptypb.Empty, error)
	// Search nearby churches
	GetChurchProfile(context.Context, *GetChurchProfileRequest) (*GetChurchProfileResponse, error)
	// Get church the current user belongs to
	GetUserChurch(context.Context, *GetUserChurchRequest) (*GetUserChurchResponse, error)
	GetChurchMembers(*GetChurchMembersRequest, ChurchService_GetChurchMembersServer) error
	// ! Church projects
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	MarkProjectCompleted(context.Context, *MarkProjectCompletedRequest) (*MarkProjectCompletedResponse, error)
	GetChurchProjects(*GetChurchProjectsRequest, ChurchService_GetChurchProjectsServer) error
	CreateProjectDonate(context.Context, *ProjectDonationRequest) (*ProjectDonateResponse, error)
	GetProjectDetails(context.Context, *GetProjectDetailsRequest) (*ChurchProject, error)
	GetProjectContributors(*GetProjectDetailsRequest, ChurchService_GetProjectContributorsServer) error
	// ! Church Announcements
	CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementResponse, error)
	GetChurchAnnouncements(*GetChurchAnnouncementsRequest, ChurchService_GetChurchAnnouncementsServer) error
	GetAnnouncementsForUser(*GetAnnouncementsForUserRequest, ChurchService_GetAnnouncementsForUserServer) error
	UpdateChurchAccountDetails(context.Context, *UpdateAccountDetailsRequest) (*UpdateAccountDetailsResponse, error)
	// Church programs
	CreateProgram(context.Context, *CreateChurchProgramRequest) (*CreateChurchProgramResponse, error)
	GetChurchPrograms(*GetChurchProgramsRequest, ChurchService_GetChurchProgramsServer) error
	EditChurchProgram(context.Context, *CreateChurchProgramRequest) (*CreateChurchProgramResponse, error)
	DeleteChurchProgram(context.Context, *DeleteChurchProgramRequest) (*CreateChurchProgramResponse, error)
	// TODO: UNDONE
	// Group service
	CreateGroup(context.Context, *Group) (*Group, error)
	GetGroup(context.Context, *GroupId) (*Group, error)
	UpdateGroup(context.Context, *Group) (*Group, error)
	DeleteGroup(context.Context, *GroupId) (*emptypb.Empty, error)
	ListGroups(context.Context, *emptypb.Empty) (*GroupList, error)
	// UserGroupMembership service
	CreateMembership(context.Context, *UserGroupMembership) (*UserGroupMembership, error)
	GetMembership(context.Context, *GroupMembershipId) (*UserGroupMembership, error)
	UpdateMembership(context.Context, *UserGroupMembership) (*UserGroupMembership, error)
	DeleteMembership(context.Context, *GroupMembershipId) (*emptypb.Empty, error)
	ListMemberships(context.Context, *GroupMembershipId) (*UserGroupMembershipList, error)
	// GroupForums service
	CreateGroupForum(context.Context, *GroupForum) (*GroupForum, error)
	GetGroupForum(context.Context, *GroupForumId) (*GroupForum, error)
	UpdateGroupForum(context.Context, *GroupForum) (*GroupForum, error)
	DeleteGroupForum(context.Context, *GroupForumId) (*emptypb.Empty, error)
	ListGroupForums(context.Context, *GroupForumId) (*GroupForumList, error)
	// Organization service
	CreateOrganization(context.Context, *Organization) (*Organization, error)
	GetOrganization(context.Context, *OrganizationId) (*Organization, error)
	UpdateOrganization(context.Context, *Organization) (*Organization, error)
	DeleteOrganization(context.Context, *OrganizationId) (*emptypb.Empty, error)
	ListOrganizations(context.Context, *emptypb.Empty) (*OrganizationList, error)
	// UserOrganizationMembership service
	CreateOrganizationMembership(context.Context, *UserOrganizationMembership) (*UserOrganizationMembership, error)
	GetOrganizationMembership(context.Context, *OrganizationMembershipId) (*UserOrganizationMembership, error)
	UpdateOrganizationMembership(context.Context, *UserOrganizationMembership) (*UserOrganizationMembership, error)
	DeleteOrganizationMembership(context.Context, *OrganizationMembershipId) (*emptypb.Empty, error)
	ListOrganizationMemberships(context.Context, *OrganizationMembershipId) (*UserOrganizationMembershipList, error)
	// OrganizationForums service
	CreateOrganizationForum(context.Context, *OrganizationForum) (*OrganizationForum, error)
	GetOrganizationForum(context.Context, *OrganizationForumId) (*OrganizationForum, error)
	UpdateOrganizationForum(context.Context, *OrganizationForum) (*OrganizationForum, error)
	DeleteOrganizationForum(context.Context, *OrganizationForumId) (*emptypb.Empty, error)
	ListOrganizationForums(context.Context, *OrganizationForumId) (*OrganizationForumList, error)
	mustEmbedUnimplementedChurchServiceServer()
}

// UnimplementedChurchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChurchServiceServer struct {
}

func (UnimplementedChurchServiceServer) AddDenomination(context.Context, *AddDenominationRequest) (*AddDenominationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDenomination not implemented")
}
func (UnimplementedChurchServiceServer) GetDenominationList(context.Context, *GetDenominationRequest) (*GetDenominationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDenominationList not implemented")
}
func (UnimplementedChurchServiceServer) CreateChurch(context.Context, *Church) (*CreateChurchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChurch not implemented")
}
func (UnimplementedChurchServiceServer) ChangeDenominationMembership(context.Context, *MembershipChangeRequest) (*MembershipChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDenominationMembership not implemented")
}
func (UnimplementedChurchServiceServer) ChangeChurchMembership(context.Context, *MembershipChangeRequest) (*MembershipChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeChurchMembership not implemented")
}
func (UnimplementedChurchServiceServer) SearchChurches(context.Context, *SearchRequestChurch) (*SearchChurchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChurches not implemented")
}
func (UnimplementedChurchServiceServer) SearchNearbyChurches(*SearchRequestChurch, ChurchService_SearchNearbyChurchesServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchNearbyChurches not implemented")
}
func (UnimplementedChurchServiceServer) SelectDenomination(context.Context, *MembershipChangeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDenomination not implemented")
}
func (UnimplementedChurchServiceServer) GetChurchProfile(context.Context, *GetChurchProfileRequest) (*GetChurchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChurchProfile not implemented")
}
func (UnimplementedChurchServiceServer) GetUserChurch(context.Context, *GetUserChurchRequest) (*GetUserChurchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChurch not implemented")
}
func (UnimplementedChurchServiceServer) GetChurchMembers(*GetChurchMembersRequest, ChurchService_GetChurchMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChurchMembers not implemented")
}
func (UnimplementedChurchServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedChurchServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedChurchServiceServer) MarkProjectCompleted(context.Context, *MarkProjectCompletedRequest) (*MarkProjectCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkProjectCompleted not implemented")
}
func (UnimplementedChurchServiceServer) GetChurchProjects(*GetChurchProjectsRequest, ChurchService_GetChurchProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChurchProjects not implemented")
}
func (UnimplementedChurchServiceServer) CreateProjectDonate(context.Context, *ProjectDonationRequest) (*ProjectDonateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectDonate not implemented")
}
func (UnimplementedChurchServiceServer) GetProjectDetails(context.Context, *GetProjectDetailsRequest) (*ChurchProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDetails not implemented")
}
func (UnimplementedChurchServiceServer) GetProjectContributors(*GetProjectDetailsRequest, ChurchService_GetProjectContributorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectContributors not implemented")
}
func (UnimplementedChurchServiceServer) CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncement not implemented")
}
func (UnimplementedChurchServiceServer) GetChurchAnnouncements(*GetChurchAnnouncementsRequest, ChurchService_GetChurchAnnouncementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChurchAnnouncements not implemented")
}
func (UnimplementedChurchServiceServer) GetAnnouncementsForUser(*GetAnnouncementsForUserRequest, ChurchService_GetAnnouncementsForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAnnouncementsForUser not implemented")
}
func (UnimplementedChurchServiceServer) UpdateChurchAccountDetails(context.Context, *UpdateAccountDetailsRequest) (*UpdateAccountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChurchAccountDetails not implemented")
}
func (UnimplementedChurchServiceServer) CreateProgram(context.Context, *CreateChurchProgramRequest) (*CreateChurchProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (UnimplementedChurchServiceServer) GetChurchPrograms(*GetChurchProgramsRequest, ChurchService_GetChurchProgramsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChurchPrograms not implemented")
}
func (UnimplementedChurchServiceServer) EditChurchProgram(context.Context, *CreateChurchProgramRequest) (*CreateChurchProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChurchProgram not implemented")
}
func (UnimplementedChurchServiceServer) DeleteChurchProgram(context.Context, *DeleteChurchProgramRequest) (*CreateChurchProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChurchProgram not implemented")
}
func (UnimplementedChurchServiceServer) CreateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedChurchServiceServer) GetGroup(context.Context, *GroupId) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedChurchServiceServer) UpdateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedChurchServiceServer) DeleteGroup(context.Context, *GroupId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedChurchServiceServer) ListGroups(context.Context, *emptypb.Empty) (*GroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedChurchServiceServer) CreateMembership(context.Context, *UserGroupMembership) (*UserGroupMembership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembership not implemented")
}
func (UnimplementedChurchServiceServer) GetMembership(context.Context, *GroupMembershipId) (*UserGroupMembership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembership not implemented")
}
func (UnimplementedChurchServiceServer) UpdateMembership(context.Context, *UserGroupMembership) (*UserGroupMembership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembership not implemented")
}
func (UnimplementedChurchServiceServer) DeleteMembership(context.Context, *GroupMembershipId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMembership not implemented")
}
func (UnimplementedChurchServiceServer) ListMemberships(context.Context, *GroupMembershipId) (*UserGroupMembershipList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberships not implemented")
}
func (UnimplementedChurchServiceServer) CreateGroupForum(context.Context, *GroupForum) (*GroupForum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupForum not implemented")
}
func (UnimplementedChurchServiceServer) GetGroupForum(context.Context, *GroupForumId) (*GroupForum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupForum not implemented")
}
func (UnimplementedChurchServiceServer) UpdateGroupForum(context.Context, *GroupForum) (*GroupForum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupForum not implemented")
}
func (UnimplementedChurchServiceServer) DeleteGroupForum(context.Context, *GroupForumId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupForum not implemented")
}
func (UnimplementedChurchServiceServer) ListGroupForums(context.Context, *GroupForumId) (*GroupForumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupForums not implemented")
}
func (UnimplementedChurchServiceServer) CreateOrganization(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedChurchServiceServer) GetOrganization(context.Context, *OrganizationId) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedChurchServiceServer) UpdateOrganization(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedChurchServiceServer) DeleteOrganization(context.Context, *OrganizationId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedChurchServiceServer) ListOrganizations(context.Context, *emptypb.Empty) (*OrganizationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedChurchServiceServer) CreateOrganizationMembership(context.Context, *UserOrganizationMembership) (*UserOrganizationMembership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationMembership not implemented")
}
func (UnimplementedChurchServiceServer) GetOrganizationMembership(context.Context, *OrganizationMembershipId) (*UserOrganizationMembership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMembership not implemented")
}
func (UnimplementedChurchServiceServer) UpdateOrganizationMembership(context.Context, *UserOrganizationMembership) (*UserOrganizationMembership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMembership not implemented")
}
func (UnimplementedChurchServiceServer) DeleteOrganizationMembership(context.Context, *OrganizationMembershipId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationMembership not implemented")
}
func (UnimplementedChurchServiceServer) ListOrganizationMemberships(context.Context, *OrganizationMembershipId) (*UserOrganizationMembershipList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMemberships not implemented")
}
func (UnimplementedChurchServiceServer) CreateOrganizationForum(context.Context, *OrganizationForum) (*OrganizationForum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationForum not implemented")
}
func (UnimplementedChurchServiceServer) GetOrganizationForum(context.Context, *OrganizationForumId) (*OrganizationForum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationForum not implemented")
}
func (UnimplementedChurchServiceServer) UpdateOrganizationForum(context.Context, *OrganizationForum) (*OrganizationForum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationForum not implemented")
}
func (UnimplementedChurchServiceServer) DeleteOrganizationForum(context.Context, *OrganizationForumId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationForum not implemented")
}
func (UnimplementedChurchServiceServer) ListOrganizationForums(context.Context, *OrganizationForumId) (*OrganizationForumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationForums not implemented")
}
func (UnimplementedChurchServiceServer) mustEmbedUnimplementedChurchServiceServer() {}

// UnsafeChurchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChurchServiceServer will
// result in compilation errors.
type UnsafeChurchServiceServer interface {
	mustEmbedUnimplementedChurchServiceServer()
}

func RegisterChurchServiceServer(s grpc.ServiceRegistrar, srv ChurchServiceServer) {
	s.RegisterService(&ChurchService_ServiceDesc, srv)
}

func _ChurchService_AddDenomination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDenominationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).AddDenomination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_AddDenomination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).AddDenomination(ctx, req.(*AddDenominationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetDenominationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDenominationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetDenominationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetDenominationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetDenominationList(ctx, req.(*GetDenominationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_CreateChurch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Church)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateChurch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateChurch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateChurch(ctx, req.(*Church))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_ChangeDenominationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).ChangeDenominationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_ChangeDenominationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).ChangeDenominationMembership(ctx, req.(*MembershipChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_ChangeChurchMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).ChangeChurchMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_ChangeChurchMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).ChangeChurchMembership(ctx, req.(*MembershipChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_SearchChurches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestChurch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).SearchChurches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_SearchChurches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).SearchChurches(ctx, req.(*SearchRequestChurch))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_SearchNearbyChurches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequestChurch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChurchServiceServer).SearchNearbyChurches(m, &churchServiceSearchNearbyChurchesServer{stream})
}

type ChurchService_SearchNearbyChurchesServer interface {
	Send(*Church) error
	grpc.ServerStream
}

type churchServiceSearchNearbyChurchesServer struct {
	grpc.ServerStream
}

func (x *churchServiceSearchNearbyChurchesServer) Send(m *Church) error {
	return x.ServerStream.SendMsg(m)
}

func _ChurchService_SelectDenomination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).SelectDenomination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_SelectDenomination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).SelectDenomination(ctx, req.(*MembershipChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetChurchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChurchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetChurchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetChurchProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetChurchProfile(ctx, req.(*GetChurchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetUserChurch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChurchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetUserChurch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetUserChurch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetUserChurch(ctx, req.(*GetUserChurchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetChurchMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChurchMembersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChurchServiceServer).GetChurchMembers(m, &churchServiceGetChurchMembersServer{stream})
}

type ChurchService_GetChurchMembersServer interface {
	Send(*GetChurchMembersResponse) error
	grpc.ServerStream
}

type churchServiceGetChurchMembersServer struct {
	grpc.ServerStream
}

func (x *churchServiceGetChurchMembersServer) Send(m *GetChurchMembersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChurchService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_MarkProjectCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkProjectCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).MarkProjectCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_MarkProjectCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).MarkProjectCompleted(ctx, req.(*MarkProjectCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetChurchProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChurchProjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChurchServiceServer).GetChurchProjects(m, &churchServiceGetChurchProjectsServer{stream})
}

type ChurchService_GetChurchProjectsServer interface {
	Send(*GetChurchProjectsResponse) error
	grpc.ServerStream
}

type churchServiceGetChurchProjectsServer struct {
	grpc.ServerStream
}

func (x *churchServiceGetChurchProjectsServer) Send(m *GetChurchProjectsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChurchService_CreateProjectDonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateProjectDonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateProjectDonate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateProjectDonate(ctx, req.(*ProjectDonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetProjectDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetProjectDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetProjectDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetProjectDetails(ctx, req.(*GetProjectDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetProjectContributors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProjectDetailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChurchServiceServer).GetProjectContributors(m, &churchServiceGetProjectContributorsServer{stream})
}

type ChurchService_GetProjectContributorsServer interface {
	Send(*ProjectContributor) error
	grpc.ServerStream
}

type churchServiceGetProjectContributorsServer struct {
	grpc.ServerStream
}

func (x *churchServiceGetProjectContributorsServer) Send(m *ProjectContributor) error {
	return x.ServerStream.SendMsg(m)
}

func _ChurchService_CreateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateAnnouncement(ctx, req.(*CreateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetChurchAnnouncements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChurchAnnouncementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChurchServiceServer).GetChurchAnnouncements(m, &churchServiceGetChurchAnnouncementsServer{stream})
}

type ChurchService_GetChurchAnnouncementsServer interface {
	Send(*GetAnnouncementsResponse) error
	grpc.ServerStream
}

type churchServiceGetChurchAnnouncementsServer struct {
	grpc.ServerStream
}

func (x *churchServiceGetChurchAnnouncementsServer) Send(m *GetAnnouncementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChurchService_GetAnnouncementsForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAnnouncementsForUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChurchServiceServer).GetAnnouncementsForUser(m, &churchServiceGetAnnouncementsForUserServer{stream})
}

type ChurchService_GetAnnouncementsForUserServer interface {
	Send(*GetAnnouncementsResponse) error
	grpc.ServerStream
}

type churchServiceGetAnnouncementsForUserServer struct {
	grpc.ServerStream
}

func (x *churchServiceGetAnnouncementsForUserServer) Send(m *GetAnnouncementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChurchService_UpdateChurchAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).UpdateChurchAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_UpdateChurchAccountDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).UpdateChurchAccountDetails(ctx, req.(*UpdateAccountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChurchProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateProgram(ctx, req.(*CreateChurchProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetChurchPrograms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChurchProgramsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChurchServiceServer).GetChurchPrograms(m, &churchServiceGetChurchProgramsServer{stream})
}

type ChurchService_GetChurchProgramsServer interface {
	Send(*GetChurchProgramsResponse) error
	grpc.ServerStream
}

type churchServiceGetChurchProgramsServer struct {
	grpc.ServerStream
}

func (x *churchServiceGetChurchProgramsServer) Send(m *GetChurchProgramsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChurchService_EditChurchProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChurchProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).EditChurchProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_EditChurchProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).EditChurchProgram(ctx, req.(*CreateChurchProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_DeleteChurchProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChurchProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).DeleteChurchProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_DeleteChurchProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).DeleteChurchProgram(ctx, req.(*DeleteChurchProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetGroup(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).DeleteGroup(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).ListGroups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupMembership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateMembership(ctx, req.(*UserGroupMembership))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMembershipId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetMembership(ctx, req.(*GroupMembershipId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_UpdateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupMembership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).UpdateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_UpdateMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).UpdateMembership(ctx, req.(*UserGroupMembership))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_DeleteMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMembershipId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).DeleteMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_DeleteMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).DeleteMembership(ctx, req.(*GroupMembershipId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_ListMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMembershipId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).ListMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_ListMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).ListMemberships(ctx, req.(*GroupMembershipId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_CreateGroupForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupForum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateGroupForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateGroupForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateGroupForum(ctx, req.(*GroupForum))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetGroupForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupForumId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetGroupForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetGroupForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetGroupForum(ctx, req.(*GroupForumId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_UpdateGroupForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupForum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).UpdateGroupForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_UpdateGroupForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).UpdateGroupForum(ctx, req.(*GroupForum))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_DeleteGroupForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupForumId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).DeleteGroupForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_DeleteGroupForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).DeleteGroupForum(ctx, req.(*GroupForumId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_ListGroupForums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupForumId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).ListGroupForums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_ListGroupForums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).ListGroupForums(ctx, req.(*GroupForumId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetOrganization(ctx, req.(*OrganizationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).UpdateOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).DeleteOrganization(ctx, req.(*OrganizationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).ListOrganizations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_CreateOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrganizationMembership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateOrganizationMembership(ctx, req.(*UserOrganizationMembership))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMembershipId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetOrganizationMembership(ctx, req.(*OrganizationMembershipId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_UpdateOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrganizationMembership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).UpdateOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_UpdateOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).UpdateOrganizationMembership(ctx, req.(*UserOrganizationMembership))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_DeleteOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMembershipId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).DeleteOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_DeleteOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).DeleteOrganizationMembership(ctx, req.(*OrganizationMembershipId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_ListOrganizationMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMembershipId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).ListOrganizationMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_ListOrganizationMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).ListOrganizationMemberships(ctx, req.(*OrganizationMembershipId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_CreateOrganizationForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationForum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).CreateOrganizationForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_CreateOrganizationForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).CreateOrganizationForum(ctx, req.(*OrganizationForum))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_GetOrganizationForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationForumId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).GetOrganizationForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_GetOrganizationForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).GetOrganizationForum(ctx, req.(*OrganizationForumId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_UpdateOrganizationForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationForum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).UpdateOrganizationForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_UpdateOrganizationForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).UpdateOrganizationForum(ctx, req.(*OrganizationForum))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_DeleteOrganizationForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationForumId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).DeleteOrganizationForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_DeleteOrganizationForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).DeleteOrganizationForum(ctx, req.(*OrganizationForumId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChurchService_ListOrganizationForums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationForumId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChurchServiceServer).ListOrganizationForums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChurchService_ListOrganizationForums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChurchServiceServer).ListOrganizationForums(ctx, req.(*OrganizationForumId))
	}
	return interceptor(ctx, in, info, handler)
}

// ChurchService_ServiceDesc is the grpc.ServiceDesc for ChurchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChurchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChurchService",
	HandlerType: (*ChurchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDenomination",
			Handler:    _ChurchService_AddDenomination_Handler,
		},
		{
			MethodName: "GetDenominationList",
			Handler:    _ChurchService_GetDenominationList_Handler,
		},
		{
			MethodName: "CreateChurch",
			Handler:    _ChurchService_CreateChurch_Handler,
		},
		{
			MethodName: "ChangeDenominationMembership",
			Handler:    _ChurchService_ChangeDenominationMembership_Handler,
		},
		{
			MethodName: "ChangeChurchMembership",
			Handler:    _ChurchService_ChangeChurchMembership_Handler,
		},
		{
			MethodName: "SearchChurches",
			Handler:    _ChurchService_SearchChurches_Handler,
		},
		{
			MethodName: "SelectDenomination",
			Handler:    _ChurchService_SelectDenomination_Handler,
		},
		{
			MethodName: "GetChurchProfile",
			Handler:    _ChurchService_GetChurchProfile_Handler,
		},
		{
			MethodName: "GetUserChurch",
			Handler:    _ChurchService_GetUserChurch_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ChurchService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ChurchService_UpdateProject_Handler,
		},
		{
			MethodName: "MarkProjectCompleted",
			Handler:    _ChurchService_MarkProjectCompleted_Handler,
		},
		{
			MethodName: "CreateProjectDonate",
			Handler:    _ChurchService_CreateProjectDonate_Handler,
		},
		{
			MethodName: "GetProjectDetails",
			Handler:    _ChurchService_GetProjectDetails_Handler,
		},
		{
			MethodName: "CreateAnnouncement",
			Handler:    _ChurchService_CreateAnnouncement_Handler,
		},
		{
			MethodName: "UpdateChurchAccountDetails",
			Handler:    _ChurchService_UpdateChurchAccountDetails_Handler,
		},
		{
			MethodName: "CreateProgram",
			Handler:    _ChurchService_CreateProgram_Handler,
		},
		{
			MethodName: "EditChurchProgram",
			Handler:    _ChurchService_EditChurchProgram_Handler,
		},
		{
			MethodName: "DeleteChurchProgram",
			Handler:    _ChurchService_DeleteChurchProgram_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ChurchService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _ChurchService_GetGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ChurchService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ChurchService_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _ChurchService_ListGroups_Handler,
		},
		{
			MethodName: "CreateMembership",
			Handler:    _ChurchService_CreateMembership_Handler,
		},
		{
			MethodName: "GetMembership",
			Handler:    _ChurchService_GetMembership_Handler,
		},
		{
			MethodName: "UpdateMembership",
			Handler:    _ChurchService_UpdateMembership_Handler,
		},
		{
			MethodName: "DeleteMembership",
			Handler:    _ChurchService_DeleteMembership_Handler,
		},
		{
			MethodName: "ListMemberships",
			Handler:    _ChurchService_ListMemberships_Handler,
		},
		{
			MethodName: "CreateGroupForum",
			Handler:    _ChurchService_CreateGroupForum_Handler,
		},
		{
			MethodName: "GetGroupForum",
			Handler:    _ChurchService_GetGroupForum_Handler,
		},
		{
			MethodName: "UpdateGroupForum",
			Handler:    _ChurchService_UpdateGroupForum_Handler,
		},
		{
			MethodName: "DeleteGroupForum",
			Handler:    _ChurchService_DeleteGroupForum_Handler,
		},
		{
			MethodName: "ListGroupForums",
			Handler:    _ChurchService_ListGroupForums_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _ChurchService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _ChurchService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _ChurchService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _ChurchService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _ChurchService_ListOrganizations_Handler,
		},
		{
			MethodName: "CreateOrganizationMembership",
			Handler:    _ChurchService_CreateOrganizationMembership_Handler,
		},
		{
			MethodName: "GetOrganizationMembership",
			Handler:    _ChurchService_GetOrganizationMembership_Handler,
		},
		{
			MethodName: "UpdateOrganizationMembership",
			Handler:    _ChurchService_UpdateOrganizationMembership_Handler,
		},
		{
			MethodName: "DeleteOrganizationMembership",
			Handler:    _ChurchService_DeleteOrganizationMembership_Handler,
		},
		{
			MethodName: "ListOrganizationMemberships",
			Handler:    _ChurchService_ListOrganizationMemberships_Handler,
		},
		{
			MethodName: "CreateOrganizationForum",
			Handler:    _ChurchService_CreateOrganizationForum_Handler,
		},
		{
			MethodName: "GetOrganizationForum",
			Handler:    _ChurchService_GetOrganizationForum_Handler,
		},
		{
			MethodName: "UpdateOrganizationForum",
			Handler:    _ChurchService_UpdateOrganizationForum_Handler,
		},
		{
			MethodName: "DeleteOrganizationForum",
			Handler:    _ChurchService_DeleteOrganizationForum_Handler,
		},
		{
			MethodName: "ListOrganizationForums",
			Handler:    _ChurchService_ListOrganizationForums_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchNearbyChurches",
			Handler:       _ChurchService_SearchNearbyChurches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChurchMembers",
			Handler:       _ChurchService_GetChurchMembers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChurchProjects",
			Handler:       _ChurchService_GetChurchProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProjectContributors",
			Handler:       _ChurchService_GetProjectContributors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChurchAnnouncements",
			Handler:       _ChurchService_GetChurchAnnouncements_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAnnouncementsForUser",
			Handler:       _ChurchService_GetAnnouncementsForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChurchPrograms",
			Handler:       _ChurchService_GetChurchPrograms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_church.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: service_social_media.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SocialMedia_PostStream_FullMethodName             = "/pb.SocialMedia/PostStream"
	SocialMedia_GetPost_FullMethodName                = "/pb.SocialMedia/GetPost"
	SocialMedia_CreatePost_FullMethodName             = "/pb.SocialMedia/CreatePost"
	SocialMedia_FollowUser_FullMethodName             = "/pb.SocialMedia/FollowUser"
	SocialMedia_UnFollowUser_FullMethodName           = "/pb.SocialMedia/UnFollowUser"
	SocialMedia_GetFollowers_FullMethodName           = "/pb.SocialMedia/GetFollowers"
	SocialMedia_GetFollowing_FullMethodName           = "/pb.SocialMedia/GetFollowing"
	SocialMedia_ViewUserProfile_FullMethodName        = "/pb.SocialMedia/ViewUserProfile"
	SocialMedia_GetPostsByUserId_FullMethodName       = "/pb.SocialMedia/GetPostsByUserId"
	SocialMedia_LikePost_FullMethodName               = "/pb.SocialMedia/LikePost"
	SocialMedia_ViewPost_FullMethodName               = "/pb.SocialMedia/ViewPost"
	SocialMedia_SuggestUsersToFollow_FullMethodName   = "/pb.SocialMedia/SuggestUsersToFollow"
	SocialMedia_SendPostComment_FullMethodName        = "/pb.SocialMedia/SendPostComment"
	SocialMedia_FetchPostComment_FullMethodName       = "/pb.SocialMedia/FetchPostComment"
	SocialMedia_LiveComments_FullMethodName           = "/pb.SocialMedia/LiveComments"
	SocialMedia_CreateRepost_FullMethodName           = "/pb.SocialMedia/CreateRepost"
	SocialMedia_GetRepost_FullMethodName              = "/pb.SocialMedia/GetRepost"
	SocialMedia_GetRepostsByUser_FullMethodName       = "/pb.SocialMedia/GetRepostsByUser"
	SocialMedia_DeleteRepost_FullMethodName           = "/pb.SocialMedia/DeleteRepost"
	SocialMedia_GetBookmarkedPosts_FullMethodName     = "/pb.SocialMedia/GetBookmarkedPosts"
	SocialMedia_BookmarkPost_FullMethodName           = "/pb.SocialMedia/BookmarkPost"
	SocialMedia_DeleteBookmark_FullMethodName         = "/pb.SocialMedia/DeleteBookmark"
	SocialMedia_BlockUser_FullMethodName              = "/pb.SocialMedia/BlockUser"
	SocialMedia_GetBlockedUsers_FullMethodName        = "/pb.SocialMedia/GetBlockedUsers"
	SocialMedia_UnblockUser_FullMethodName            = "/pb.SocialMedia/UnblockUser"
	SocialMedia_GenericSearch_FullMethodName          = "/pb.SocialMedia/GenericSearch"
	SocialMedia_GetNotifications_FullMethodName       = "/pb.SocialMedia/GetNotifications"
	SocialMedia_MarkNotificationAsRead_FullMethodName = "/pb.SocialMedia/MarkNotificationAsRead"
	SocialMedia_DeleteNotifications_FullMethodName    = "/pb.SocialMedia/DeleteNotifications"
)

// SocialMediaClient is the client API for SocialMedia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialMediaClient interface {
	// Bidirectional streaming RPC for Posts
	PostStream(ctx context.Context, opts ...grpc.CallOption) (SocialMedia_PostStreamClient, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*PostStreamResponse, error)
	// Client stream (for images) for creating posts
	CreatePost(ctx context.Context, opts ...grpc.CallOption) (SocialMedia_CreatePostClient, error)
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	UnFollowUser(ctx context.Context, in *UnFollowUserRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (SocialMedia_GetFollowersClient, error)
	GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (SocialMedia_GetFollowingClient, error)
	ViewUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	// Get posts of a user
	GetPostsByUserId(ctx context.Context, in *GetPostsByUserIdRequest, opts ...grpc.CallOption) (SocialMedia_GetPostsByUserIdClient, error)
	// unary stream for real-time likes and unlikes
	LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error)
	// unary stream for real-time view
	ViewPost(ctx context.Context, in *ViewPostRequest, opts ...grpc.CallOption) (*ViewPostResponse, error)
	// Sends a paginated request for users to follow suggestions.
	SuggestUsersToFollow(ctx context.Context, in *SuggestUsersToFollowRequest, opts ...grpc.CallOption) (*SuggestUsersToFollowResponse, error)
	SendPostComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	FetchPostComment(ctx context.Context, in *FetchCommentsRequest, opts ...grpc.CallOption) (*FetchCommentsResponse, error)
	// Review: Bidirectional streaming RPC for live comments on a post
	LiveComments(ctx context.Context, opts ...grpc.CallOption) (SocialMedia_LiveCommentsClient, error)
	// ! Reposts
	// Create a new repost
	CreateRepost(ctx context.Context, in *CreateRepostRequest, opts ...grpc.CallOption) (*RepostResponse, error)
	// Get a repost by ID
	GetRepost(ctx context.Context, in *GetRepostRequest, opts ...grpc.CallOption) (*RepostResponse, error)
	// Get reposts by user ID
	GetRepostsByUser(ctx context.Context, in *GetRepostsByUserRequest, opts ...grpc.CallOption) (*RepostsResponse, error)
	// Delete a repost
	DeleteRepost(ctx context.Context, in *DeleteRepostRequest, opts ...grpc.CallOption) (*DeleteRepostResponse, error)
	// RPC to get a list of bookmarked posts for a user.
	GetBookmarkedPosts(ctx context.Context, in *GetBookmarkedPostsRequest, opts ...grpc.CallOption) (*GetBookmarkedPostsResponse, error)
	// RPC to bookmark a post.
	BookmarkPost(ctx context.Context, in *BookmarkPostRequest, opts ...grpc.CallOption) (*BookmarkPostResponse, error)
	// RPC to delete a bookmarked post.
	DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...grpc.CallOption) (*DeleteBookmarkResponse, error)
	// RPC to block a user.
	BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error)
	// RPC to get a list of blocked users by the blocker.
	GetBlockedUsers(ctx context.Context, in *GetBlockedUsersRequest, opts ...grpc.CallOption) (*GetBlockedUsersResponse, error)
	// RPC to unblock a user.
	UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error)
	// Search rpc
	GenericSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error)
	// ! Notifications
	GetNotifications(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (SocialMedia_GetNotificationsClient, error)
	MarkNotificationAsRead(ctx context.Context, in *NotificationId, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error)
	DeleteNotifications(ctx context.Context, in *NotificationIds, opts ...grpc.CallOption) (*DeleteNotificationResponse, error)
}

type socialMediaClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialMediaClient(cc grpc.ClientConnInterface) SocialMediaClient {
	return &socialMediaClient{cc}
}

func (c *socialMediaClient) PostStream(ctx context.Context, opts ...grpc.CallOption) (SocialMedia_PostStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMedia_ServiceDesc.Streams[0], SocialMedia_PostStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaPostStreamClient{stream}
	return x, nil
}

type SocialMedia_PostStreamClient interface {
	Send(*PostRequest) error
	Recv() (*PostStreamResponse, error)
	grpc.ClientStream
}

type socialMediaPostStreamClient struct {
	grpc.ClientStream
}

func (x *socialMediaPostStreamClient) Send(m *PostRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socialMediaPostStreamClient) Recv() (*PostStreamResponse, error) {
	m := new(PostStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socialMediaClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*PostStreamResponse, error) {
	out := new(PostStreamResponse)
	err := c.cc.Invoke(ctx, SocialMedia_GetPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) CreatePost(ctx context.Context, opts ...grpc.CallOption) (SocialMedia_CreatePostClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMedia_ServiceDesc.Streams[1], SocialMedia_CreatePost_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaCreatePostClient{stream}
	return x, nil
}

type SocialMedia_CreatePostClient interface {
	Send(*CreatePostRequest) error
	CloseAndRecv() (*CreatePostResponse, error)
	grpc.ClientStream
}

type socialMediaCreatePostClient struct {
	grpc.ClientStream
}

func (x *socialMediaCreatePostClient) Send(m *CreatePostRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socialMediaCreatePostClient) CloseAndRecv() (*CreatePostResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreatePostResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socialMediaClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, SocialMedia_FollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) UnFollowUser(ctx context.Context, in *UnFollowUserRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, SocialMedia_UnFollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (SocialMedia_GetFollowersClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMedia_ServiceDesc.Streams[2], SocialMedia_GetFollowers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaGetFollowersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SocialMedia_GetFollowersClient interface {
	Recv() (*PostUser, error)
	grpc.ClientStream
}

type socialMediaGetFollowersClient struct {
	grpc.ClientStream
}

func (x *socialMediaGetFollowersClient) Recv() (*PostUser, error) {
	m := new(PostUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socialMediaClient) GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (SocialMedia_GetFollowingClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMedia_ServiceDesc.Streams[3], SocialMedia_GetFollowing_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaGetFollowingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SocialMedia_GetFollowingClient interface {
	Recv() (*PostUser, error)
	grpc.ClientStream
}

type socialMediaGetFollowingClient struct {
	grpc.ClientStream
}

func (x *socialMediaGetFollowingClient) Recv() (*PostUser, error) {
	m := new(PostUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socialMediaClient) ViewUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, SocialMedia_ViewUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) GetPostsByUserId(ctx context.Context, in *GetPostsByUserIdRequest, opts ...grpc.CallOption) (SocialMedia_GetPostsByUserIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMedia_ServiceDesc.Streams[4], SocialMedia_GetPostsByUserId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaGetPostsByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SocialMedia_GetPostsByUserIdClient interface {
	Recv() (*Post, error)
	grpc.ClientStream
}

type socialMediaGetPostsByUserIdClient struct {
	grpc.ClientStream
}

func (x *socialMediaGetPostsByUserIdClient) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socialMediaClient) LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error) {
	out := new(LikePostResponse)
	err := c.cc.Invoke(ctx, SocialMedia_LikePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) ViewPost(ctx context.Context, in *ViewPostRequest, opts ...grpc.CallOption) (*ViewPostResponse, error) {
	out := new(ViewPostResponse)
	err := c.cc.Invoke(ctx, SocialMedia_ViewPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) SuggestUsersToFollow(ctx context.Context, in *SuggestUsersToFollowRequest, opts ...grpc.CallOption) (*SuggestUsersToFollowResponse, error) {
	out := new(SuggestUsersToFollowResponse)
	err := c.cc.Invoke(ctx, SocialMedia_SuggestUsersToFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) SendPostComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, SocialMedia_SendPostComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) FetchPostComment(ctx context.Context, in *FetchCommentsRequest, opts ...grpc.CallOption) (*FetchCommentsResponse, error) {
	out := new(FetchCommentsResponse)
	err := c.cc.Invoke(ctx, SocialMedia_FetchPostComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) LiveComments(ctx context.Context, opts ...grpc.CallOption) (SocialMedia_LiveCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMedia_ServiceDesc.Streams[5], SocialMedia_LiveComments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaLiveCommentsClient{stream}
	return x, nil
}

type SocialMedia_LiveCommentsClient interface {
	Send(*Comment) error
	Recv() (*Comment, error)
	grpc.ClientStream
}

type socialMediaLiveCommentsClient struct {
	grpc.ClientStream
}

func (x *socialMediaLiveCommentsClient) Send(m *Comment) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socialMediaLiveCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socialMediaClient) CreateRepost(ctx context.Context, in *CreateRepostRequest, opts ...grpc.CallOption) (*RepostResponse, error) {
	out := new(RepostResponse)
	err := c.cc.Invoke(ctx, SocialMedia_CreateRepost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) GetRepost(ctx context.Context, in *GetRepostRequest, opts ...grpc.CallOption) (*RepostResponse, error) {
	out := new(RepostResponse)
	err := c.cc.Invoke(ctx, SocialMedia_GetRepost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) GetRepostsByUser(ctx context.Context, in *GetRepostsByUserRequest, opts ...grpc.CallOption) (*RepostsResponse, error) {
	out := new(RepostsResponse)
	err := c.cc.Invoke(ctx, SocialMedia_GetRepostsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) DeleteRepost(ctx context.Context, in *DeleteRepostRequest, opts ...grpc.CallOption) (*DeleteRepostResponse, error) {
	out := new(DeleteRepostResponse)
	err := c.cc.Invoke(ctx, SocialMedia_DeleteRepost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) GetBookmarkedPosts(ctx context.Context, in *GetBookmarkedPostsRequest, opts ...grpc.CallOption) (*GetBookmarkedPostsResponse, error) {
	out := new(GetBookmarkedPostsResponse)
	err := c.cc.Invoke(ctx, SocialMedia_GetBookmarkedPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) BookmarkPost(ctx context.Context, in *BookmarkPostRequest, opts ...grpc.CallOption) (*BookmarkPostResponse, error) {
	out := new(BookmarkPostResponse)
	err := c.cc.Invoke(ctx, SocialMedia_BookmarkPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...grpc.CallOption) (*DeleteBookmarkResponse, error) {
	out := new(DeleteBookmarkResponse)
	err := c.cc.Invoke(ctx, SocialMedia_DeleteBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error) {
	out := new(BlockUserResponse)
	err := c.cc.Invoke(ctx, SocialMedia_BlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) GetBlockedUsers(ctx context.Context, in *GetBlockedUsersRequest, opts ...grpc.CallOption) (*GetBlockedUsersResponse, error) {
	out := new(GetBlockedUsersResponse)
	err := c.cc.Invoke(ctx, SocialMedia_GetBlockedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error) {
	out := new(UnblockUserResponse)
	err := c.cc.Invoke(ctx, SocialMedia_UnblockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) GenericSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, SocialMedia_GenericSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) GetNotifications(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (SocialMedia_GetNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMedia_ServiceDesc.Streams[6], SocialMedia_GetNotifications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaGetNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SocialMedia_GetNotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type socialMediaGetNotificationsClient struct {
	grpc.ClientStream
}

func (x *socialMediaGetNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socialMediaClient) MarkNotificationAsRead(ctx context.Context, in *NotificationId, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error) {
	out := new(MarkNotificationAsReadResponse)
	err := c.cc.Invoke(ctx, SocialMedia_MarkNotificationAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaClient) DeleteNotifications(ctx context.Context, in *NotificationIds, opts ...grpc.CallOption) (*DeleteNotificationResponse, error) {
	out := new(DeleteNotificationResponse)
	err := c.cc.Invoke(ctx, SocialMedia_DeleteNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialMediaServer is the server API for SocialMedia service.
// All implementations must embed UnimplementedSocialMediaServer
// for forward compatibility
type SocialMediaServer interface {
	// Bidirectional streaming RPC for Posts
	PostStream(SocialMedia_PostStreamServer) error
	GetPost(context.Context, *GetPostRequest) (*PostStreamResponse, error)
	// Client stream (for images) for creating posts
	CreatePost(SocialMedia_CreatePostServer) error
	FollowUser(context.Context, *FollowUserRequest) (*FollowResponse, error)
	UnFollowUser(context.Context, *UnFollowUserRequest) (*FollowResponse, error)
	GetFollowers(*GetFollowersRequest, SocialMedia_GetFollowersServer) error
	GetFollowing(*GetFollowingRequest, SocialMedia_GetFollowingServer) error
	ViewUserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error)
	// Get posts of a user
	GetPostsByUserId(*GetPostsByUserIdRequest, SocialMedia_GetPostsByUserIdServer) error
	// unary stream for real-time likes and unlikes
	LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error)
	// unary stream for real-time view
	ViewPost(context.Context, *ViewPostRequest) (*ViewPostResponse, error)
	// Sends a paginated request for users to follow suggestions.
	SuggestUsersToFollow(context.Context, *SuggestUsersToFollowRequest) (*SuggestUsersToFollowResponse, error)
	SendPostComment(context.Context, *CommentRequest) (*CommentResponse, error)
	FetchPostComment(context.Context, *FetchCommentsRequest) (*FetchCommentsResponse, error)
	// Review: Bidirectional streaming RPC for live comments on a post
	LiveComments(SocialMedia_LiveCommentsServer) error
	// ! Reposts
	// Create a new repost
	CreateRepost(context.Context, *CreateRepostRequest) (*RepostResponse, error)
	// Get a repost by ID
	GetRepost(context.Context, *GetRepostRequest) (*RepostResponse, error)
	// Get reposts by user ID
	GetRepostsByUser(context.Context, *GetRepostsByUserRequest) (*RepostsResponse, error)
	// Delete a repost
	DeleteRepost(context.Context, *DeleteRepostRequest) (*DeleteRepostResponse, error)
	// RPC to get a list of bookmarked posts for a user.
	GetBookmarkedPosts(context.Context, *GetBookmarkedPostsRequest) (*GetBookmarkedPostsResponse, error)
	// RPC to bookmark a post.
	BookmarkPost(context.Context, *BookmarkPostRequest) (*BookmarkPostResponse, error)
	// RPC to delete a bookmarked post.
	DeleteBookmark(context.Context, *DeleteBookmarkRequest) (*DeleteBookmarkResponse, error)
	// RPC to block a user.
	BlockUser(context.Context, *BlockUserRequest) (*BlockUserResponse, error)
	// RPC to get a list of blocked users by the blocker.
	GetBlockedUsers(context.Context, *GetBlockedUsersRequest) (*GetBlockedUsersResponse, error)
	// RPC to unblock a user.
	UnblockUser(context.Context, *UnblockUserRequest) (*UnblockUserResponse, error)
	// Search rpc
	GenericSearch(context.Context, *SearchRequest) (*SearchResult, error)
	// ! Notifications
	GetNotifications(*GetNotificationRequest, SocialMedia_GetNotificationsServer) error
	MarkNotificationAsRead(context.Context, *NotificationId) (*MarkNotificationAsReadResponse, error)
	DeleteNotifications(context.Context, *NotificationIds) (*DeleteNotificationResponse, error)
	mustEmbedUnimplementedSocialMediaServer()
}

// UnimplementedSocialMediaServer must be embedded to have forward compatible implementations.
type UnimplementedSocialMediaServer struct {
}

func (UnimplementedSocialMediaServer) PostStream(SocialMedia_PostStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PostStream not implemented")
}
func (UnimplementedSocialMediaServer) GetPost(context.Context, *GetPostRequest) (*PostStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedSocialMediaServer) CreatePost(SocialMedia_CreatePostServer) error {
	return status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedSocialMediaServer) FollowUser(context.Context, *FollowUserRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedSocialMediaServer) UnFollowUser(context.Context, *UnFollowUserRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollowUser not implemented")
}
func (UnimplementedSocialMediaServer) GetFollowers(*GetFollowersRequest, SocialMedia_GetFollowersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedSocialMediaServer) GetFollowing(*GetFollowingRequest, SocialMedia_GetFollowingServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (UnimplementedSocialMediaServer) ViewUserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewUserProfile not implemented")
}
func (UnimplementedSocialMediaServer) GetPostsByUserId(*GetPostsByUserIdRequest, SocialMedia_GetPostsByUserIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPostsByUserId not implemented")
}
func (UnimplementedSocialMediaServer) LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedSocialMediaServer) ViewPost(context.Context, *ViewPostRequest) (*ViewPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPost not implemented")
}
func (UnimplementedSocialMediaServer) SuggestUsersToFollow(context.Context, *SuggestUsersToFollowRequest) (*SuggestUsersToFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestUsersToFollow not implemented")
}
func (UnimplementedSocialMediaServer) SendPostComment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPostComment not implemented")
}
func (UnimplementedSocialMediaServer) FetchPostComment(context.Context, *FetchCommentsRequest) (*FetchCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPostComment not implemented")
}
func (UnimplementedSocialMediaServer) LiveComments(SocialMedia_LiveCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveComments not implemented")
}
func (UnimplementedSocialMediaServer) CreateRepost(context.Context, *CreateRepostRequest) (*RepostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepost not implemented")
}
func (UnimplementedSocialMediaServer) GetRepost(context.Context, *GetRepostRequest) (*RepostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepost not implemented")
}
func (UnimplementedSocialMediaServer) GetRepostsByUser(context.Context, *GetRepostsByUserRequest) (*RepostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepostsByUser not implemented")
}
func (UnimplementedSocialMediaServer) DeleteRepost(context.Context, *DeleteRepostRequest) (*DeleteRepostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepost not implemented")
}
func (UnimplementedSocialMediaServer) GetBookmarkedPosts(context.Context, *GetBookmarkedPostsRequest) (*GetBookmarkedPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmarkedPosts not implemented")
}
func (UnimplementedSocialMediaServer) BookmarkPost(context.Context, *BookmarkPostRequest) (*BookmarkPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkPost not implemented")
}
func (UnimplementedSocialMediaServer) DeleteBookmark(context.Context, *DeleteBookmarkRequest) (*DeleteBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmark not implemented")
}
func (UnimplementedSocialMediaServer) BlockUser(context.Context, *BlockUserRequest) (*BlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedSocialMediaServer) GetBlockedUsers(context.Context, *GetBlockedUsersRequest) (*GetBlockedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockedUsers not implemented")
}
func (UnimplementedSocialMediaServer) UnblockUser(context.Context, *UnblockUserRequest) (*UnblockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedSocialMediaServer) GenericSearch(context.Context, *SearchRequest) (*SearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenericSearch not implemented")
}
func (UnimplementedSocialMediaServer) GetNotifications(*GetNotificationRequest, SocialMedia_GetNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedSocialMediaServer) MarkNotificationAsRead(context.Context, *NotificationId) (*MarkNotificationAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationAsRead not implemented")
}
func (UnimplementedSocialMediaServer) DeleteNotifications(context.Context, *NotificationIds) (*DeleteNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifications not implemented")
}
func (UnimplementedSocialMediaServer) mustEmbedUnimplementedSocialMediaServer() {}

// UnsafeSocialMediaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialMediaServer will
// result in compilation errors.
type UnsafeSocialMediaServer interface {
	mustEmbedUnimplementedSocialMediaServer()
}

func RegisterSocialMediaServer(s grpc.ServiceRegistrar, srv SocialMediaServer) {
	s.RegisterService(&SocialMedia_ServiceDesc, srv)
}

func _SocialMedia_PostStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocialMediaServer).PostStream(&socialMediaPostStreamServer{stream})
}

type SocialMedia_PostStreamServer interface {
	Send(*PostStreamResponse) error
	Recv() (*PostRequest, error)
	grpc.ServerStream
}

type socialMediaPostStreamServer struct {
	grpc.ServerStream
}

func (x *socialMediaPostStreamServer) Send(m *PostStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socialMediaPostStreamServer) Recv() (*PostRequest, error) {
	m := new(PostRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SocialMedia_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_CreatePost_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocialMediaServer).CreatePost(&socialMediaCreatePostServer{stream})
}

type SocialMedia_CreatePostServer interface {
	SendAndClose(*CreatePostResponse) error
	Recv() (*CreatePostRequest, error)
	grpc.ServerStream
}

type socialMediaCreatePostServer struct {
	grpc.ServerStream
}

func (x *socialMediaCreatePostServer) SendAndClose(m *CreatePostResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socialMediaCreatePostServer) Recv() (*CreatePostRequest, error) {
	m := new(CreatePostRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SocialMedia_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_UnFollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).UnFollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_UnFollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).UnFollowUser(ctx, req.(*UnFollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_GetFollowers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFollowersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SocialMediaServer).GetFollowers(m, &socialMediaGetFollowersServer{stream})
}

type SocialMedia_GetFollowersServer interface {
	Send(*PostUser) error
	grpc.ServerStream
}

type socialMediaGetFollowersServer struct {
	grpc.ServerStream
}

func (x *socialMediaGetFollowersServer) Send(m *PostUser) error {
	return x.ServerStream.SendMsg(m)
}

func _SocialMedia_GetFollowing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFollowingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SocialMediaServer).GetFollowing(m, &socialMediaGetFollowingServer{stream})
}

type SocialMedia_GetFollowingServer interface {
	Send(*PostUser) error
	grpc.ServerStream
}

type socialMediaGetFollowingServer struct {
	grpc.ServerStream
}

func (x *socialMediaGetFollowingServer) Send(m *PostUser) error {
	return x.ServerStream.SendMsg(m)
}

func _SocialMedia_ViewUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).ViewUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_ViewUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).ViewUserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_GetPostsByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPostsByUserIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SocialMediaServer).GetPostsByUserId(m, &socialMediaGetPostsByUserIdServer{stream})
}

type SocialMedia_GetPostsByUserIdServer interface {
	Send(*Post) error
	grpc.ServerStream
}

type socialMediaGetPostsByUserIdServer struct {
	grpc.ServerStream
}

func (x *socialMediaGetPostsByUserIdServer) Send(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

func _SocialMedia_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).LikePost(ctx, req.(*LikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_ViewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).ViewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_ViewPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).ViewPost(ctx, req.(*ViewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_SuggestUsersToFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestUsersToFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).SuggestUsersToFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_SuggestUsersToFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).SuggestUsersToFollow(ctx, req.(*SuggestUsersToFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_SendPostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).SendPostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_SendPostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).SendPostComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_FetchPostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).FetchPostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_FetchPostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).FetchPostComment(ctx, req.(*FetchCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_LiveComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocialMediaServer).LiveComments(&socialMediaLiveCommentsServer{stream})
}

type SocialMedia_LiveCommentsServer interface {
	Send(*Comment) error
	Recv() (*Comment, error)
	grpc.ServerStream
}

type socialMediaLiveCommentsServer struct {
	grpc.ServerStream
}

func (x *socialMediaLiveCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socialMediaLiveCommentsServer) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SocialMedia_CreateRepost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).CreateRepost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_CreateRepost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).CreateRepost(ctx, req.(*CreateRepostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_GetRepost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).GetRepost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_GetRepost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).GetRepost(ctx, req.(*GetRepostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_GetRepostsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepostsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).GetRepostsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_GetRepostsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).GetRepostsByUser(ctx, req.(*GetRepostsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_DeleteRepost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).DeleteRepost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_DeleteRepost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).DeleteRepost(ctx, req.(*DeleteRepostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_GetBookmarkedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookmarkedPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).GetBookmarkedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_GetBookmarkedPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).GetBookmarkedPosts(ctx, req.(*GetBookmarkedPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_BookmarkPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).BookmarkPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_BookmarkPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).BookmarkPost(ctx, req.(*BookmarkPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_DeleteBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).DeleteBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_DeleteBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).DeleteBookmark(ctx, req.(*DeleteBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).BlockUser(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_GetBlockedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).GetBlockedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_GetBlockedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).GetBlockedUsers(ctx, req.(*GetBlockedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_UnblockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).UnblockUser(ctx, req.(*UnblockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_GenericSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).GenericSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_GenericSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).GenericSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SocialMediaServer).GetNotifications(m, &socialMediaGetNotificationsServer{stream})
}

type SocialMedia_GetNotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type socialMediaGetNotificationsServer struct {
	grpc.ServerStream
}

func (x *socialMediaGetNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _SocialMedia_MarkNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).MarkNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_MarkNotificationAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).MarkNotificationAsRead(ctx, req.(*NotificationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMedia_DeleteNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServer).DeleteNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMedia_DeleteNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServer).DeleteNotifications(ctx, req.(*NotificationIds))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialMedia_ServiceDesc is the grpc.ServiceDesc for SocialMedia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialMedia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SocialMedia",
	HandlerType: (*SocialMediaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPost",
			Handler:    _SocialMedia_GetPost_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _SocialMedia_FollowUser_Handler,
		},
		{
			MethodName: "UnFollowUser",
			Handler:    _SocialMedia_UnFollowUser_Handler,
		},
		{
			MethodName: "ViewUserProfile",
			Handler:    _SocialMedia_ViewUserProfile_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _SocialMedia_LikePost_Handler,
		},
		{
			MethodName: "ViewPost",
			Handler:    _SocialMedia_ViewPost_Handler,
		},
		{
			MethodName: "SuggestUsersToFollow",
			Handler:    _SocialMedia_SuggestUsersToFollow_Handler,
		},
		{
			MethodName: "SendPostComment",
			Handler:    _SocialMedia_SendPostComment_Handler,
		},
		{
			MethodName: "FetchPostComment",
			Handler:    _SocialMedia_FetchPostComment_Handler,
		},
		{
			MethodName: "CreateRepost",
			Handler:    _SocialMedia_CreateRepost_Handler,
		},
		{
			MethodName: "GetRepost",
			Handler:    _SocialMedia_GetRepost_Handler,
		},
		{
			MethodName: "GetRepostsByUser",
			Handler:    _SocialMedia_GetRepostsByUser_Handler,
		},
		{
			MethodName: "DeleteRepost",
			Handler:    _SocialMedia_DeleteRepost_Handler,
		},
		{
			MethodName: "GetBookmarkedPosts",
			Handler:    _SocialMedia_GetBookmarkedPosts_Handler,
		},
		{
			MethodName: "BookmarkPost",
			Handler:    _SocialMedia_BookmarkPost_Handler,
		},
		{
			MethodName: "DeleteBookmark",
			Handler:    _SocialMedia_DeleteBookmark_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _SocialMedia_BlockUser_Handler,
		},
		{
			MethodName: "GetBlockedUsers",
			Handler:    _SocialMedia_GetBlockedUsers_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _SocialMedia_UnblockUser_Handler,
		},
		{
			MethodName: "GenericSearch",
			Handler:    _SocialMedia_GenericSearch_Handler,
		},
		{
			MethodName: "MarkNotificationAsRead",
			Handler:    _SocialMedia_MarkNotificationAsRead_Handler,
		},
		{
			MethodName: "DeleteNotifications",
			Handler:    _SocialMedia_DeleteNotifications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostStream",
			Handler:       _SocialMedia_PostStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CreatePost",
			Handler:       _SocialMedia_CreatePost_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFollowers",
			Handler:       _SocialMedia_GetFollowers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFollowing",
			Handler:       _SocialMedia_GetFollowing_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPostsByUserId",
			Handler:       _SocialMedia_GetPostsByUserId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiveComments",
			Handler:       _SocialMedia_LiveComments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetNotifications",
			Handler:       _SocialMedia_GetNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_social_media.proto",
}

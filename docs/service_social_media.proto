syntax = "proto3";

package socialmedia;

/*
message StreamNewPostsRequest {
  string user_id = 1;
  repeated string followings = 2; // IDs of users whose posts to stream
}


message StreamPostUpdatesRequest {
  repeated string post_ids = 1; // IDs of posts to watch for updates
}


message StreamNewCommentsRequest {
  string post_id = 1;
}



message StreamNewLikesRequest {
  string post_id = 1;
}

*/

// The user service for user-related operations.
service UserService {
  rpc FollowUser(FollowUserRequest) returns (FollowUserResponse);
  rpc UnfollowUser(UnfollowUserRequest) returns (UnfollowUserResponse);
  rpc BlockUser(BlockUserRequest) returns (BlockUserResponse);
}

// The post service for post-related operations.
service PostService {
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse);
  rpc UpdatePost(UpdatePostRequest) returns (UpdatePostResponse);
  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse);
  rpc LikePost(LikePostRequest) returns (LikePostResponse);
  rpc UnlikePost(UnlikePostRequest) returns (UnlikePostResponse);
  rpc CommentOnPost(CommentOnPostRequest) returns (CommentOnPostResponse);
  rpc ReportPost(ReportPostRequest) returns (ReportPostResponse);
  rpc Repost(RepostRequest) returns (RepostResponse);
  rpc BookmarkPost(BookmarkPostRequest) returns (BookmarkPostResponse);
  rpc RemoveBookmark(RemoveBookmarkRequest) returns (RemoveBookmarkResponse);

    //   STREAMS
    // Streams new posts to the client in real-time.
    rpc StreamNewPosts(stream StreamNewPostsRequest) returns (stream Post);

    // Streams updates to existing posts, such as edits or deletions.
    // rpc StreamPostUpdates(StreamPostUpdatesRequest) returns (stream PostUpdate);

    // Streams new comments on a given post to the client in real-time.
    rpc StreamNewComments(stream StreamNewCommentsRequest) returns (stream Comment);

    // Streams new likes on a given post to the client in real-time.
    rpc StreamNewLikes(stream StreamNewLikesRequest) returns (stream Like);
}

// The moderation service for post moderation.
service ModerationService {
  rpc QueuePostForModeration(QueuePostForModerationRequest) returns (QueuePostForModerationResponse);
}

// Request and response messages.
message FollowUserRequest {
  string follower_user_id = 1;
  string following_user_id = 2;
}

message FollowUserResponse {
  bool success = 1;
}

message UnfollowUserRequest {
  string follower_user_id = 1;
  string following_user_id = 2;
}

message UnfollowUserResponse {
  bool success = 1;
}

message BlockUserRequest {
  string blocking_user_id = 1;
  string blocked_user_id = 2;
}

message BlockUserResponse {
  bool success = 1;
}

message CreatePostRequest {
  string user_id = 1;
  string content = 2;
  int32 total_images = 3;
  repeated string image_urls = 4;
  repeated string captions = 5;
  repeated string hashtags = 6;
}

message CreatePostResponse {
  string post_id = 1;
}

message UpdatePostRequest {
  string post_id = 1;
  string content = 2;
}

message UpdatePostResponse {
  bool success = 1;
}

message DeletePostRequest {
  string post_id = 1;
}

message DeletePostResponse {
  bool success = 1;
}

message LikePostRequest {
  string user_id = 1;
  string post_id = 2;
}

message LikePostResponse {
  bool success = 1;
}

message UnlikePostRequest {
  string user_id = 1;
  string post_id = 2;
}

message UnlikePostResponse {
  bool success = 1;
}

message CommentOnPostRequest {
  string user_id = 1;
  string post_id = 2;
  string comment_text = 3;
}

message CommentOnPostResponse {
  string comment_id = 1;
}

message ReportPostRequest {
  string post_id = 1;
  string user_id = 2;
  string reason = 3;
}

message ReportPostResponse {
  bool success = 1;
}

message RepostRequest {
  string user_id = 1;
  string original_post_id = 2;
}

message RepostResponse {
  string repost_id = 1;
}

message BookmarkPostRequest {
  string user_id = 1;
  string post_id = 2;
}

message BookmarkPostResponse {
  bool success = 1;
}

message RemoveBookmarkRequest {
  string user_id = 1;
  string post_id  = 2;
}

message RemoveBookmarkResponse {
  bool success = 1;
}

message QueuePostForModerationRequest {
  string post_id = 1;
  string user_id = 2;
  string report_reason = 3;
}

message QueuePostForModerationResponse {
  bool success = 1;
}
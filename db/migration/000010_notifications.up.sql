-- Create notifications table
CREATE TABLE notifications (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" uuid NOT NULL,
    "type" VARCHAR(50) NOT NULL,
    read BOOLEAN NOT NULL DEFAULT false,
    time timestamptz DEFAULT (now()),
    FOREIGN KEY (user_id) REFERENCES authentications(id)
);



-- Create mentions_notifications table 
CREATE TABLE mentions_notifications (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "notification_id" INT NOT NULL,
    "post_id" uuid NOT NULL,
    "author_id" uuid NOT NULL,  -- User who mentioned
    "mentioning_user_id" uuid NOT NULL,  -- User who was mentioned
    FOREIGN KEY (notification_id) REFERENCES notifications(id),
    FOREIGN KEY (author_id) REFERENCES authentications(id),
    FOREIGN KEY (mentioning_user_id) REFERENCES authentications(id),
    FOREIGN KEY (post_id) REFERENCES posts(id),
    CONSTRAINT unique_mention_per_user_per_post UNIQUE (notification_id, post_id, mentioning_user_id)
);

-- Create follow_notifications table
CREATE TABLE follow_notifications (
    "notification_id" INT PRIMARY KEY,
    "author_id" uuid NOT NULL,  -- User who started following
    "following_user_id" uuid NOT NULL,  -- User who was followed
    FOREIGN KEY (notification_id) REFERENCES notifications(id),
    FOREIGN KEY (author_id) REFERENCES authentications(id),
    FOREIGN KEY (following_user_id) REFERENCES authentications(id)
);


-- Create post_comment_notifications table 
CREATE TABLE post_comment_notifications (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "notification_id" INT NOT NULL,
    "post_id" uuid NOT NULL,
    "author_id" uuid NOT NULL,  -- User who commented
    "comment_user_id" uuid NOT NULL,  -- User who owns the post
    FOREIGN KEY (notification_id) REFERENCES notifications(id),
    FOREIGN KEY (author_id) REFERENCES authentications(id),
    FOREIGN KEY (comment_user_id) REFERENCES authentications(id),
    FOREIGN KEY (post_id) REFERENCES posts(id),
    CONSTRAINT unique_comment_per_user_per_post UNIQUE (post_id, comment_user_id)
);


-- Create post_like_notifications table 
CREATE TABLE post_like_notifications (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "notification_id" INT NOT NULL,
    "post_id" uuid NOT NULL,
    "author_id" uuid NOT NULL,  -- User who liked the post
    "like_user_id" uuid NOT NULL,  -- User who owns the post
    FOREIGN KEY (notification_id) REFERENCES notifications(id),
    FOREIGN KEY (like_user_id) REFERENCES authentications(id),
    FOREIGN KEY (author_id) REFERENCES authentications(id),
    FOREIGN KEY (post_id) REFERENCES posts(id),
    CONSTRAINT unique_like_per_user_per_post UNIQUE (post_id, like_user_id)
);

-- Create announcement_notifications table 
CREATE TABLE announcement_notifications (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "notification_id" INT NOT NULL,
    "news_id" uuid NOT NULL,
    "author_id" uuid NOT NULL,  -- Announcement author id
    "user_id" uuid NOT NULL,
    FOREIGN KEY (notification_id) REFERENCES notifications(id),
    FOREIGN KEY (user_id) REFERENCES authentications(id),
    FOREIGN KEY (author_id) REFERENCES authentications(id),
    FOREIGN KEY (news_id) REFERENCES announcements(id),
    CONSTRAINT unique_user_per_announcement UNIQUE (news_id, user_id)
);


-- Create index on type column
CREATE INDEX ON "notifications" ("type");
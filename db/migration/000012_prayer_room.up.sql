-- Create ENUM type for status
CREATE TYPE participant_status AS ENUM ('invited', 'accepted', 'declined');

-- Create prayer_room Table
CREATE TABLE prayer_room (
    room_id VARCHAR(13) PRIMARY KEY,
    -- url VARCHAR(255) UNIQUE,
    author_id uuid NOT NULL,
    name VARCHAR(255),
    created_at TIMESTAMPTZ DEFAULT (now()),
    start_time TIMESTAMPTZ,
    end_time TIMESTAMPTZ,
    FOREIGN KEY (author_id) REFERENCES authentications(id) ON DELETE CASCADE
);

-- Create prayer_participants Table
CREATE TABLE prayer_participants (
    participant_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    room_id VARCHAR(13) NOT NULL,
    user_id uuid NOT NULL,
    status participant_status DEFAULT 'invited', -- Reference the ENUM type here
    -- joined_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (room_id) REFERENCES prayer_room(room_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES authentications(id) ON DELETE CASCADE, -- Optional if users are involved
    CONSTRAINT unique_room_user UNIQUE (room_id, user_id) -- Ensure a user can only be invited once to a room
);

-- Create invite_notifications table
CREATE TABLE prayer_invite_notifications (
    notification_id INT PRIMARY KEY,
    "author_id" uuid NOT NULL,  -- User who sent the invitation
    "inviting_user_id" uuid NOT NULL,  -- User who was invited
    -- "schedule_time" timestamptz NOT NULL,
    -- "title" TEXT not null,
    "room_id" VARCHAR(13) not null,
    FOREIGN KEY (notification_id) REFERENCES notifications(id),
    FOREIGN KEY (author_id) REFERENCES authentications(id),
    FOREIGN KEY (inviting_user_id) REFERENCES authentications(id),
    FOREIGN KEY (room_id) REFERENCES prayer_room(room_id) ON DELETE CASCADE,
    CONSTRAINT unique_prayer_invite_per_user_per_room UNIQUE (notification_id, room_id, inviting_user_id)
);

CREATE INDEX ON "prayer_room" ("room_id");
CREATE INDEX ON "prayer_room" ("author_id");

CREATE INDEX ON "prayer_participants" ("user_id");
CREATE INDEX ON "prayer_participants" ("room_id");

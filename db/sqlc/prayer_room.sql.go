// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: prayer_room.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPrayerParticipants = `-- name: CreatePrayerParticipants :exec
INSERT INTO prayer_participants (user_id, room_id)
SELECT user_id, $2
FROM UNNEST($1::uuid[]) AS user_id
`

type CreatePrayerParticipantsParams struct {
	Column1 []uuid.UUID `json:"column_1"`
	RoomID  string      `json:"room_id"`
}

func (q *Queries) CreatePrayerParticipants(ctx context.Context, arg CreatePrayerParticipantsParams) error {
	_, err := q.db.ExecContext(ctx, createPrayerParticipants, pq.Array(arg.Column1), arg.RoomID)
	return err
}

const createPrayerRoom = `-- name: CreatePrayerRoom :exec
INSERT INTO prayer_room (room_id, author_id, name, start_time, end_time)
VALUES ($1, $2, $3, $4, $5)
`

type CreatePrayerRoomParams struct {
	RoomID    string         `json:"room_id"`
	AuthorID  uuid.UUID      `json:"author_id"`
	Name      sql.NullString `json:"name"`
	StartTime sql.NullTime   `json:"start_time"`
	EndTime   sql.NullTime   `json:"end_time"`
}

func (q *Queries) CreatePrayerRoom(ctx context.Context, arg CreatePrayerRoomParams) error {
	_, err := q.db.ExecContext(ctx, createPrayerRoom,
		arg.RoomID,
		arg.AuthorID,
		arg.Name,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}

const deleteParticipant = `-- name: DeleteParticipant :exec
DELETE FROM prayer_participants
WHERE room_id = $1
`

func (q *Queries) DeleteParticipant(ctx context.Context, roomID string) error {
	_, err := q.db.ExecContext(ctx, deleteParticipant, roomID)
	return err
}

const deletePrayerRoom = `-- name: DeletePrayerRoom :exec
DELETE FROM prayer_room
WHERE room_id = $1
`

func (q *Queries) DeletePrayerRoom(ctx context.Context, roomID string) error {
	_, err := q.db.ExecContext(ctx, deletePrayerRoom, roomID)
	return err
}

const getPrayerRoomById = `-- name: GetPrayerRoomById :one
SELECT room_id, author_id, name, created_at, start_time, end_time FROM prayer_room
WHERE room_id = $1
`

func (q *Queries) GetPrayerRoomById(ctx context.Context, roomID string) (PrayerRoom, error) {
	row := q.db.QueryRowContext(ctx, getPrayerRoomById, roomID)
	var i PrayerRoom
	err := row.Scan(
		&i.RoomID,
		&i.AuthorID,
		&i.Name,
		&i.CreatedAt,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const getPrayerRooms = `-- name: GetPrayerRooms :many
SELECT pr.room_id, pr.author_id, pr.name, pr.created_at, pr.start_time, pr.end_time, pp.status AS participant_status
FROM prayer_room pr
JOIN prayer_participants pp ON pr.room_id = pp.room_id
WHERE pp.user_id = $1
ORDER BY pr.start_time DESC -- Optional: you can order by any column you prefer
LIMIT $2 OFFSET $3
`

type GetPrayerRoomsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type GetPrayerRoomsRow struct {
	RoomID            string                `json:"room_id"`
	AuthorID          uuid.UUID             `json:"author_id"`
	Name              sql.NullString        `json:"name"`
	CreatedAt         sql.NullTime          `json:"created_at"`
	StartTime         sql.NullTime          `json:"start_time"`
	EndTime           sql.NullTime          `json:"end_time"`
	ParticipantStatus NullParticipantStatus `json:"participant_status"`
}

func (q *Queries) GetPrayerRooms(ctx context.Context, arg GetPrayerRoomsParams) ([]GetPrayerRoomsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPrayerRooms, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPrayerRoomsRow{}
	for rows.Next() {
		var i GetPrayerRoomsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.AuthorID,
			&i.Name,
			&i.CreatedAt,
			&i.StartTime,
			&i.EndTime,
			&i.ParticipantStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrayerInvitation = `-- name: UpdatePrayerInvitation :exec
UPDATE prayer_participants
SET status = $3
WHERE room_id = $1 AND user_id = $2
`

type UpdatePrayerInvitationParams struct {
	RoomID string                `json:"room_id"`
	UserID uuid.UUID             `json:"user_id"`
	Status NullParticipantStatus `json:"status"`
}

func (q *Queries) UpdatePrayerInvitation(ctx context.Context, arg UpdatePrayerInvitationParams) error {
	_, err := q.db.ExecContext(ctx, updatePrayerInvitation, arg.RoomID, arg.UserID, arg.Status)
	return err
}

const updatePrayerRoom = `-- name: UpdatePrayerRoom :exec
UPDATE prayer_room
SET
    name = COALESCE($1, name),
    start_time = COALESCE($2, start_time),
    end_time = COALESCE($3, end_time)
WHERE
    room_id = $4
`

type UpdatePrayerRoomParams struct {
	Name      sql.NullString `json:"name"`
	StartTime sql.NullTime   `json:"start_time"`
	EndTime   sql.NullTime   `json:"end_time"`
	RoomID    string         `json:"room_id"`
}

func (q *Queries) UpdatePrayerRoom(ctx context.Context, arg UpdatePrayerRoomParams) error {
	_, err := q.db.ExecContext(ctx, updatePrayerRoom,
		arg.Name,
		arg.StartTime,
		arg.EndTime,
		arg.RoomID,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: follow.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFollow = `-- name: CreateFollow :exec

INSERT INTO follow (
    follower_user_id, following_user_id, created_at
    )
VALUES ($1, $2, now())
`

type CreateFollowParams struct {
	FollowerUserID  uuid.UUID `json:"follower_user_id"`
	FollowingUserID uuid.UUID `json:"following_user_id"`
}

// Example: User with user_id 1 follows user with user_id 2
func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFollow, arg.FollowerUserID, arg.FollowingUserID)
	return err
}

const getFollowers = `-- name: GetFollowers :many
SELECT
    follow.follower_user_id, follow.following_user_id, follow.created_at,
    authentications.id,
    authentications.username,
    authentications.is_verified,
    authentications.created_at,
    users.first_name,
    entity_profiles.image_url
FROM
    follow
JOIN
    authentications ON follow.following_user_id = authentications.id
JOIN
    users ON follow.following_user_id = users.user_id
JOIN
    entity_profiles ON follow.following_user_id = entity_profiles.user_id
WHERE
    follow.following_user_id = $1
`

type GetFollowersRow struct {
	FollowerUserID  uuid.UUID      `json:"follower_user_id"`
	FollowingUserID uuid.UUID      `json:"following_user_id"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	ID              uuid.UUID      `json:"id"`
	Username        sql.NullString `json:"username"`
	IsVerified      sql.NullBool   `json:"is_verified"`
	CreatedAt_2     sql.NullTime   `json:"created_at_2"`
	FirstName       sql.NullString `json:"first_name"`
	ImageUrl        sql.NullString `json:"image_url"`
}

func (q *Queries) GetFollowers(ctx context.Context, followingUserID uuid.UUID) ([]GetFollowersRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, followingUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowersRow{}
	for rows.Next() {
		var i GetFollowersRow
		if err := rows.Scan(
			&i.FollowerUserID,
			&i.FollowingUserID,
			&i.CreatedAt,
			&i.ID,
			&i.Username,
			&i.IsVerified,
			&i.CreatedAt_2,
			&i.FirstName,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT
    follow.follower_user_id, follow.following_user_id, follow.created_at,
    authentications.id,
    authentications.username,
    authentications.is_verified,
    authentications.created_at,
    users.first_name,
    entity_profiles.image_url
FROM
    follow
JOIN
    authentications ON follow.following_user_id = authentications.id
JOIN
    users ON follow.following_user_id = users.user_id
JOIN
    entity_profiles ON follow.following_user_id = entity_profiles.user_id
WHERE
    follow.follower_user_id = $1
`

type GetFollowingRow struct {
	FollowerUserID  uuid.UUID      `json:"follower_user_id"`
	FollowingUserID uuid.UUID      `json:"following_user_id"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	ID              uuid.UUID      `json:"id"`
	Username        sql.NullString `json:"username"`
	IsVerified      sql.NullBool   `json:"is_verified"`
	CreatedAt_2     sql.NullTime   `json:"created_at_2"`
	FirstName       sql.NullString `json:"first_name"`
	ImageUrl        sql.NullString `json:"image_url"`
}

func (q *Queries) GetFollowing(ctx context.Context, followerUserID uuid.UUID) ([]GetFollowingRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowing, followerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowingRow{}
	for rows.Next() {
		var i GetFollowingRow
		if err := rows.Scan(
			&i.FollowerUserID,
			&i.FollowingUserID,
			&i.CreatedAt,
			&i.ID,
			&i.Username,
			&i.IsVerified,
			&i.CreatedAt_2,
			&i.FirstName,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMutualFollowers = `-- name: GetMutualFollowers :many
SELECT u.username, u.id, e.image_url
FROM authentications u
JOIN follow f1 ON u.id = f1.following_user_id
JOIN follow f2 ON u.id = f2.following_user_id
JOIN entity_profiles e ON u.id = e.user_id
WHERE f1.follower_user_id = $1
AND f2.follower_user_id = $2
`

type GetMutualFollowersParams struct {
	FollowerUserID   uuid.UUID `json:"follower_user_id"`
	FollowerUserID_2 uuid.UUID `json:"follower_user_id_2"`
}

type GetMutualFollowersRow struct {
	Username sql.NullString `json:"username"`
	ID       uuid.UUID      `json:"id"`
	ImageUrl sql.NullString `json:"image_url"`
}

func (q *Queries) GetMutualFollowers(ctx context.Context, arg GetMutualFollowersParams) ([]GetMutualFollowersRow, error) {
	rows, err := q.db.QueryContext(ctx, getMutualFollowers, arg.FollowerUserID, arg.FollowerUserID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMutualFollowersRow{}
	for rows.Next() {
		var i GetMutualFollowersRow
		if err := rows.Scan(&i.Username, &i.ID, &i.ImageUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unFollow = `-- name: UnFollow :exec
DELETE FROM follow WHERE follower_user_id = $1 AND following_user_id = $2
`

type UnFollowParams struct {
	FollowerUserID  uuid.UUID `json:"follower_user_id"`
	FollowingUserID uuid.UUID `json:"following_user_id"`
}

func (q *Queries) UnFollow(ctx context.Context, arg UnFollowParams) error {
	_, err := q.db.ExecContext(ctx, unFollow, arg.FollowerUserID, arg.FollowingUserID)
	return err
}

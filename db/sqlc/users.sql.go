// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserNames = `-- name: CreateUserNames :exec
INSERT INTO users (
    user_id, first_name, last_name
    )
VALUES ($1, $2, $3)
`

type CreateUserNamesParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
}

func (q *Queries) CreateUserNames(ctx context.Context, arg CreateUserNamesParams) error {
	_, err := q.db.ExecContext(ctx, createUserNames, arg.UserID, arg.FirstName, arg.LastName)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_id, first_name, last_name, last_denomination_change, last_church_change, denomination_id, church_id FROM users WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.LastDenominationChange,
		&i.LastChurchChange,
		&i.DenominationID,
		&i.ChurchID,
	)
	return i, err
}

const updateUserNames = `-- name: UpdateUserNames :exec
UPDATE users
SET
    first_name = COALESCE($1,first_name),
    last_name = COALESCE($2,last_name)
WHERE
    user_id = $3
`

type UpdateUserNamesParams struct {
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	UserID    uuid.UUID      `json:"user_id"`
}

func (q *Queries) UpdateUserNames(ctx context.Context, arg UpdateUserNamesParams) error {
	_, err := q.db.ExecContext(ctx, updateUserNames, arg.FirstName, arg.LastName, arg.UserID)
	return err
}

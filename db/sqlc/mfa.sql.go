// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: mfa.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addMfaSecret = `-- name: AddMfaSecret :exec
WITH deactivated_secrets AS (
  UPDATE two_factor_secrets
  SET is_active = FALSE
  WHERE user_id = $1 AND is_active = TRUE
  RETURNING user_id
)
INSERT INTO two_factor_secrets (user_id, secret_key, is_active)
SELECT $1, $2, TRUE
`

type AddMfaSecretParams struct {
	UserID    uuid.UUID `json:"user_id"`
	SecretKey string    `json:"secret_key"`
}

func (q *Queries) AddMfaSecret(ctx context.Context, arg AddMfaSecretParams) error {
	_, err := q.db.ExecContext(ctx, addMfaSecret, arg.UserID, arg.SecretKey)
	return err
}

const addRecoveryCodes = `-- name: AddRecoveryCodes :exec
WITH marked_used AS (
  UPDATE two_factor_backup_codes
  SET used = TRUE
  WHERE user_id = $1 AND used = FALSE
  RETURNING user_id
)
INSERT INTO two_factor_backup_codes (user_id, code, used)
SELECT $1, unnest($2::text[]), FALSE
`

type AddRecoveryCodesParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Column2 []string  `json:"column_2"`
}

func (q *Queries) AddRecoveryCodes(ctx context.Context, arg AddRecoveryCodesParams) error {
	_, err := q.db.ExecContext(ctx, addRecoveryCodes, arg.UserID, pq.Array(arg.Column2))
	return err
}

const getMfaSecret = `-- name: GetMfaSecret :one
SELECT secret_key
FROM two_factor_secrets
WHERE user_id = $1 AND is_active = TRUE
`

func (q *Queries) GetMfaSecret(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getMfaSecret, userID)
	var secret_key string
	err := row.Scan(&secret_key)
	return secret_key, err
}

const getRecoveryCodes = `-- name: GetRecoveryCodes :many
SELECT id, code
FROM two_factor_backup_codes
WHERE user_id = $1 AND used = FALSE
`

type GetRecoveryCodesRow struct {
	ID   int32  `json:"id"`
	Code string `json:"code"`
}

func (q *Queries) GetRecoveryCodes(ctx context.Context, userID uuid.UUID) ([]GetRecoveryCodesRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecoveryCodes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecoveryCodesRow{}
	for rows.Next() {
		var i GetRecoveryCodesRow
		if err := rows.Scan(&i.ID, &i.Code); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatedByIdRecoveryCodeToUsed = `-- name: UpdatedByIdRecoveryCodeToUsed :one
UPDATE two_factor_backup_codes
SET used = TRUE
WHERE id = $1 AND user_id = $2 AND used = FALSE
RETURNING user_id
`

type UpdatedByIdRecoveryCodeToUsedParams struct {
	ID     int32     `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdatedByIdRecoveryCodeToUsed(ctx context.Context, arg UpdatedByIdRecoveryCodeToUsedParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updatedByIdRecoveryCodeToUsed, arg.ID, arg.UserID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updatedRecoveryCodeToUsed = `-- name: UpdatedRecoveryCodeToUsed :one

UPDATE two_factor_backup_codes
SET used = TRUE
WHERE code = $1 AND user_id = $2 AND used = FALSE
RETURNING user_id
`

type UpdatedRecoveryCodeToUsedParams struct {
	Code   string    `json:"code"`
	UserID uuid.UUID `json:"user_id"`
}

// from the two_factor_backup_codes table get all codes with their corresponding id where the user_id = $1 and used = false
func (q *Queries) UpdatedRecoveryCodeToUsed(ctx context.Context, arg UpdatedRecoveryCodeToUsedParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updatedRecoveryCodeToUsed, arg.Code, arg.UserID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updatedSecretToInActive = `-- name: UpdatedSecretToInActive :exec
UPDATE two_factor_secrets
SET is_active = FALSE
WHERE user_id = $1
`

func (q *Queries) UpdatedSecretToInActive(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updatedSecretToInActive, userID)
	return err
}

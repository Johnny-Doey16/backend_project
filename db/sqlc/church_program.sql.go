// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: church_program.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createChurchProgram = `-- name: CreateChurchProgram :exec
INSERT INTO church_programs (church_id, program_type, program_name, program_desc, program_day, program_start_time, program_end_time, program_freq, program_image_url)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateChurchProgramParams struct {
	ChurchID         int32          `json:"church_id"`
	ProgramType      string         `json:"program_type"`
	ProgramName      string         `json:"program_name"`
	ProgramDesc      sql.NullString `json:"program_desc"`
	ProgramDay       sql.NullString `json:"program_day"`
	ProgramStartTime sql.NullTime   `json:"program_start_time"`
	ProgramEndTime   sql.NullTime   `json:"program_end_time"`
	ProgramFreq      sql.NullString `json:"program_freq"`
	ProgramImageUrl  sql.NullString `json:"program_image_url"`
}

func (q *Queries) CreateChurchProgram(ctx context.Context, arg CreateChurchProgramParams) error {
	_, err := q.db.ExecContext(ctx, createChurchProgram,
		arg.ChurchID,
		arg.ProgramType,
		arg.ProgramName,
		arg.ProgramDesc,
		arg.ProgramDay,
		arg.ProgramStartTime,
		arg.ProgramEndTime,
		arg.ProgramFreq,
		arg.ProgramImageUrl,
	)
	return err
}

const deleteChurchProgram = `-- name: DeleteChurchProgram :exec
DELETE FROM church_programs
WHERE id = $1
`

func (q *Queries) DeleteChurchProgram(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteChurchProgram, id)
	return err
}

const getChurchProgramById = `-- name: GetChurchProgramById :many
SELECT id, church_id, program_type, program_name, program_desc, program_day, program_start_time, program_end_time, program_freq, program_image_url, created_at FROM church_programs
WHERE id = $1
`

func (q *Queries) GetChurchProgramById(ctx context.Context, id int32) ([]ChurchProgram, error) {
	rows, err := q.db.QueryContext(ctx, getChurchProgramById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChurchProgram{}
	for rows.Next() {
		var i ChurchProgram
		if err := rows.Scan(
			&i.ID,
			&i.ChurchID,
			&i.ProgramType,
			&i.ProgramName,
			&i.ProgramDesc,
			&i.ProgramDay,
			&i.ProgramStartTime,
			&i.ProgramEndTime,
			&i.ProgramFreq,
			&i.ProgramImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChurchProgramsByChurchId = `-- name: GetChurchProgramsByChurchId :many
SELECT id, church_id, program_type, program_name, program_desc, program_day, program_start_time, program_end_time, program_freq, program_image_url, created_at FROM church_programs
WHERE church_id = $1
OFFSET $2
LIMIT $3
`

type GetChurchProgramsByChurchIdParams struct {
	ChurchID int32 `json:"church_id"`
	Offset   int32 `json:"offset"`
	Limit    int32 `json:"limit"`
}

// ORDER BY id
func (q *Queries) GetChurchProgramsByChurchId(ctx context.Context, arg GetChurchProgramsByChurchIdParams) ([]ChurchProgram, error) {
	rows, err := q.db.QueryContext(ctx, getChurchProgramsByChurchId, arg.ChurchID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChurchProgram{}
	for rows.Next() {
		var i ChurchProgram
		if err := rows.Scan(
			&i.ID,
			&i.ChurchID,
			&i.ProgramType,
			&i.ProgramName,
			&i.ProgramDesc,
			&i.ProgramDay,
			&i.ProgramStartTime,
			&i.ProgramEndTime,
			&i.ProgramFreq,
			&i.ProgramImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChurchProgramsByDay = `-- name: GetChurchProgramsByDay :many
SELECT id, church_id, program_type, program_name, program_desc, program_day, program_start_time, program_end_time, program_freq, program_image_url, created_at FROM church_programs
WHERE program_day = $1
`

func (q *Queries) GetChurchProgramsByDay(ctx context.Context, programDay sql.NullString) ([]ChurchProgram, error) {
	rows, err := q.db.QueryContext(ctx, getChurchProgramsByDay, programDay)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChurchProgram{}
	for rows.Next() {
		var i ChurchProgram
		if err := rows.Scan(
			&i.ID,
			&i.ChurchID,
			&i.ProgramType,
			&i.ProgramName,
			&i.ProgramDesc,
			&i.ProgramDay,
			&i.ProgramStartTime,
			&i.ProgramEndTime,
			&i.ProgramFreq,
			&i.ProgramImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChurchProgramsByFrequency = `-- name: GetChurchProgramsByFrequency :many
SELECT id, church_id, program_type, program_name, program_desc, program_day, program_start_time, program_end_time, program_freq, program_image_url, created_at FROM church_programs
WHERE program_freq = $1
`

func (q *Queries) GetChurchProgramsByFrequency(ctx context.Context, programFreq sql.NullString) ([]ChurchProgram, error) {
	rows, err := q.db.QueryContext(ctx, getChurchProgramsByFrequency, programFreq)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChurchProgram{}
	for rows.Next() {
		var i ChurchProgram
		if err := rows.Scan(
			&i.ID,
			&i.ChurchID,
			&i.ProgramType,
			&i.ProgramName,
			&i.ProgramDesc,
			&i.ProgramDay,
			&i.ProgramStartTime,
			&i.ProgramEndTime,
			&i.ProgramFreq,
			&i.ProgramImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChurchProgramsByType = `-- name: GetChurchProgramsByType :many
SELECT id, church_id, program_type, program_name, program_desc, program_day, program_start_time, program_end_time, program_freq, program_image_url, created_at FROM church_programs
WHERE program_type = $1
`

func (q *Queries) GetChurchProgramsByType(ctx context.Context, programType string) ([]ChurchProgram, error) {
	rows, err := q.db.QueryContext(ctx, getChurchProgramsByType, programType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChurchProgram{}
	for rows.Next() {
		var i ChurchProgram
		if err := rows.Scan(
			&i.ID,
			&i.ChurchID,
			&i.ProgramType,
			&i.ProgramName,
			&i.ProgramDesc,
			&i.ProgramDay,
			&i.ProgramStartTime,
			&i.ProgramEndTime,
			&i.ProgramFreq,
			&i.ProgramImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChurchProgramsInRange = `-- name: GetChurchProgramsInRange :many
SELECT id, church_id, program_type, program_name, program_desc, program_day, program_start_time, program_end_time, program_freq, program_image_url, created_at FROM church_programs
WHERE program_start_time >= $1 AND program_end_time <= $2
`

type GetChurchProgramsInRangeParams struct {
	ProgramStartTime sql.NullTime `json:"program_start_time"`
	ProgramEndTime   sql.NullTime `json:"program_end_time"`
}

func (q *Queries) GetChurchProgramsInRange(ctx context.Context, arg GetChurchProgramsInRangeParams) ([]ChurchProgram, error) {
	rows, err := q.db.QueryContext(ctx, getChurchProgramsInRange, arg.ProgramStartTime, arg.ProgramEndTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChurchProgram{}
	for rows.Next() {
		var i ChurchProgram
		if err := rows.Scan(
			&i.ID,
			&i.ChurchID,
			&i.ProgramType,
			&i.ProgramName,
			&i.ProgramDesc,
			&i.ProgramDay,
			&i.ProgramStartTime,
			&i.ProgramEndTime,
			&i.ProgramFreq,
			&i.ProgramImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChurchProgram = `-- name: UpdateChurchProgram :exec
UPDATE church_programs
SET
    program_type = COALESCE($1, program_type),
    program_name = COALESCE($2, program_name),
    program_desc = COALESCE($3, program_desc),
    program_day = COALESCE($4, program_day),
    program_start_time = COALESCE($5, program_start_time),
    program_end_time = COALESCE($6, program_end_time),
    program_freq = COALESCE($7, program_freq),
    program_image_url = COALESCE($8, program_image_url),
    updated_at = NOW()
WHERE
    id = $9
`

type UpdateChurchProgramParams struct {
	ProgramType      sql.NullString `json:"program_type"`
	ProgramName      sql.NullString `json:"program_name"`
	ProgramDesc      sql.NullString `json:"program_desc"`
	ProgramDay       sql.NullString `json:"program_day"`
	ProgramStartTime sql.NullTime   `json:"program_start_time"`
	ProgramEndTime   sql.NullTime   `json:"program_end_time"`
	ProgramFreq      sql.NullString `json:"program_freq"`
	ProgramImageUrl  sql.NullString `json:"program_image_url"`
	ID               int32          `json:"id"`
}

func (q *Queries) UpdateChurchProgram(ctx context.Context, arg UpdateChurchProgramParams) error {
	_, err := q.db.ExecContext(ctx, updateChurchProgram,
		arg.ProgramType,
		arg.ProgramName,
		arg.ProgramDesc,
		arg.ProgramDay,
		arg.ProgramStartTime,
		arg.ProgramEndTime,
		arg.ProgramFreq,
		arg.ProgramImageUrl,
		arg.ID,
	)
	return err
}

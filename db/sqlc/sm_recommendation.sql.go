// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sm_recommendation.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const getPostsRecommendationOLD = `-- name: GetPostsRecommendationOLD :many

WITH UserActivityRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at
    FROM posts p
    WHERE p.user_id = $1 OR p.id IN (SELECT post_id FROM likes WHERE user_id = $1)
    ORDER BY p.created_at DESC
    LIMIT 3
),

PopularPostsRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at
    FROM posts p
    JOIN posts_metrics pm ON p.id = pm.post_id
    ORDER BY pm.likes DESC
    LIMIT 3
),

FollowedUsersRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at
    FROM posts p
    JOIN follow f ON p.user_id = f.following_user_id
    WHERE f.follower_user_id = $1
    ORDER BY p.created_at DESC
    LIMIT 2
),

CollaborativeFilteringRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at
    FROM posts p
    JOIN likes l ON p.id = l.post_id
    WHERE l.user_id IN (
        SELECT following_user_id
        FROM follow
        WHERE follower_user_id = $1
    )
    AND p.id NOT IN (
        -- Exclude the user's own posts
        SELECT id
        FROM posts
        WHERE user_id = $1
    )
    ORDER BY p.created_at DESC
    LIMIT 2
),

CombinedRecommendations AS (
    SELECT id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at FROM UserActivityRecommendations
    UNION
    SELECT id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at FROM PopularPostsRecommendations
    UNION
    SELECT id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at FROM FollowedUsersRecommendations
    UNION
    SELECT id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at FROM CollaborativeFilteringRecommendations
),





POSTS_WITH_IMAGES AS (
    SELECT
        r.id, r.user_id, r.content, r.total_images, r.created_at, r.updated_at, r.suspended_at, r.deleted_at,
        json_agg(pi.image_url) AS image_urls
    FROM
        CombinedRecommendations r
        LEFT JOIN posts_images pi ON r.id = pi.post_id
    GROUP BY
        r.id, r.content, r.created_at, r.user_id, r.total_images, r.updated_at, r.deleted_at
)

SELECT id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, image_urls FROM POSTS_WITH_IMAGES
ORDER BY created_at DESC
`

type GetPostsRecommendationOLDRow struct {
	ID          uuid.UUID       `json:"id"`
	UserID      uuid.UUID       `json:"user_id"`
	Content     string          `json:"content"`
	TotalImages sql.NullInt32   `json:"total_images"`
	CreatedAt   sql.NullTime    `json:"created_at"`
	UpdatedAt   sql.NullTime    `json:"updated_at"`
	SuspendedAt sql.NullTime    `json:"suspended_at"`
	DeletedAt   sql.NullTime    `json:"deleted_at"`
	ImageUrls   json.RawMessage `json:"image_urls"`
}

// Recommendations based on user activity
// Recommendations based on popularity
// Recommendations from followed users
// Collaborative Filtering Recommendations
// Combine all recommendations
// SELECT * FROM CombinedRecommendations
// ORDER BY created_at DESC
// LIMIT 10;
func (q *Queries) GetPostsRecommendationOLD(ctx context.Context, userID uuid.UUID) ([]GetPostsRecommendationOLDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsRecommendationOLD, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsRecommendationOLDRow{}
	for rows.Next() {
		var i GetPostsRecommendationOLDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.TotalImages,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SuspendedAt,
			&i.DeletedAt,
			&i.ImageUrls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

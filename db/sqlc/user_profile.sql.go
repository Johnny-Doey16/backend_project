// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user_profile.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEntityProfile = `-- name: CreateEntityProfile :exec
INSERT INTO entity_profiles (
    user_id, image_url, entity_type, header_image_url, about, website
    )
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateEntityProfileParams struct {
	UserID         uuid.UUID      `json:"user_id"`
	ImageUrl       sql.NullString `json:"image_url"`
	EntityType     string         `json:"entity_type"`
	HeaderImageUrl sql.NullString `json:"header_image_url"`
	About          sql.NullString `json:"about"`
	Website        sql.NullString `json:"website"`
}

func (q *Queries) CreateEntityProfile(ctx context.Context, arg CreateEntityProfileParams) error {
	_, err := q.db.ExecContext(ctx, createEntityProfile,
		arg.UserID,
		arg.ImageUrl,
		arg.EntityType,
		arg.HeaderImageUrl,
		arg.About,
		arg.Website,
	)
	return err
}

const decreaseFollowers = `-- name: DecreaseFollowers :exec
UPDATE entity_profiles SET following_count = following_count - 1 WHERE user_id = $1
`

func (q *Queries) DecreaseFollowers(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, decreaseFollowers, userID)
	return err
}

const decreaseFollowing = `-- name: DecreaseFollowing :exec
UPDATE entity_profiles SET followers_count = followers_count - 1 WHERE user_id = $1
`

func (q *Queries) DecreaseFollowing(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, decreaseFollowing, userID)
	return err
}

const deleteUserProfileByID = `-- name: DeleteUserProfileByID :exec
DELETE FROM entity_profiles WHERE user_id = $1
`

func (q *Queries) DeleteUserProfileByID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfileByID, userID)
	return err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT
  u.id,
  u.username,
  u.email,
  u.phone,
  u.created_at,
  u.user_type,
  CASE
    WHEN u.user_type = 'user' THEN us.first_name
    WHEN u.user_type = 'churchAdmin' THEN c.name
    ELSE NULL
  END AS first_name,
  CASE
    WHEN u.user_type = 'user' THEN us.last_name
    ELSE NULL
  END AS last_name,
  ep.image_url,
  u.is_verified,
  ep.following_count,
  ep.followers_count,
  ep.posts_count,
  ep.header_image_url,
  ep.website,
  ep.about,
  EXISTS (
    SELECT 1
    FROM follow f
    WHERE f.follower_user_id = $1 AND f.following_user_id = u.id
  ) AS is_following,
  EXISTS (
    SELECT 1
    FROM follow f
    WHERE f.follower_user_id = u.id AND f.following_user_id = $1
  ) AS is_followed,
  EXISTS (
        SELECT 1
        FROM user_church_membership ucm
        WHERE ucm.user_id = $1 AND ucm.church_id = c.id
    ) AS is_member,
  -- Include church location details for churchAdmin type
  cl.address AS church_address,
  cl.city AS church_city,
  cl.postalCode AS church_postalCode,
  cl.lga AS church_lga,
  cl.state AS church_state,
  cl.country AS church_country,
  cl.location AS church_location,
  c.id AS church_id,
  c.denomination_id AS church_denomination_id,
  c.members_count As church_members_count,
  -- ! Added
  accounts.account_name,
  accounts.account_number,
  accounts.bank_name
FROM
  authentications u
JOIN
  entity_profiles ep ON u.id = ep.user_id
  -- ! Added
LEFT JOIN
  accounts ON u.id = accounts.user_id
LEFT JOIN
  users us ON u.id = us.user_id AND u.user_type = 'user'
LEFT JOIN
  churches c ON u.id = c.auth_id AND u.user_type = 'churchAdmin'
LEFT JOIN
  church_locations cl ON c.auth_id = cl.auth_id
WHERE
  (u.username = $2 OR u.id::text = $2) AND
  NOT EXISTS (
    SELECT 1
    FROM blocked_users bu
    WHERE bu.blocking_user_id = u.id AND bu.blocked_user_id = $1
  )
`

type GetUserProfileParams struct {
	FollowerUserID uuid.UUID      `json:"follower_user_id"`
	Username       sql.NullString `json:"username"`
}

type GetUserProfileRow struct {
	ID                   uuid.UUID      `json:"id"`
	Username             sql.NullString `json:"username"`
	Email                string         `json:"email"`
	Phone                sql.NullString `json:"phone"`
	CreatedAt            sql.NullTime   `json:"created_at"`
	UserType             string         `json:"user_type"`
	FirstName            interface{}    `json:"first_name"`
	LastName             interface{}    `json:"last_name"`
	ImageUrl             sql.NullString `json:"image_url"`
	IsVerified           sql.NullBool   `json:"is_verified"`
	FollowingCount       sql.NullInt32  `json:"following_count"`
	FollowersCount       sql.NullInt32  `json:"followers_count"`
	PostsCount           sql.NullInt32  `json:"posts_count"`
	HeaderImageUrl       sql.NullString `json:"header_image_url"`
	Website              sql.NullString `json:"website"`
	About                sql.NullString `json:"about"`
	IsFollowing          bool           `json:"is_following"`
	IsFollowed           bool           `json:"is_followed"`
	IsMember             bool           `json:"is_member"`
	ChurchAddress        sql.NullString `json:"church_address"`
	ChurchCity           sql.NullString `json:"church_city"`
	ChurchPostalcode     sql.NullString `json:"church_postalcode"`
	ChurchLga            sql.NullString `json:"church_lga"`
	ChurchState          sql.NullString `json:"church_state"`
	ChurchCountry        sql.NullString `json:"church_country"`
	ChurchLocation       interface{}    `json:"church_location"`
	ChurchID             sql.NullInt32  `json:"church_id"`
	ChurchDenominationID sql.NullInt32  `json:"church_denomination_id"`
	ChurchMembersCount   sql.NullInt32  `json:"church_members_count"`
	AccountName          sql.NullString `json:"account_name"`
	AccountNumber        sql.NullString `json:"account_number"`
	BankName             sql.NullString `json:"bank_name"`
}

// Joining with church_locations to get church location details
//
//	u.id = $2 AND
func (q *Queries) GetUserProfile(ctx context.Context, arg GetUserProfileParams) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, arg.FollowerUserID, arg.Username)
	var i GetUserProfileRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UserType,
		&i.FirstName,
		&i.LastName,
		&i.ImageUrl,
		&i.IsVerified,
		&i.FollowingCount,
		&i.FollowersCount,
		&i.PostsCount,
		&i.HeaderImageUrl,
		&i.Website,
		&i.About,
		&i.IsFollowing,
		&i.IsFollowed,
		&i.IsMember,
		&i.ChurchAddress,
		&i.ChurchCity,
		&i.ChurchPostalcode,
		&i.ChurchLga,
		&i.ChurchState,
		&i.ChurchCountry,
		&i.ChurchLocation,
		&i.ChurchID,
		&i.ChurchDenominationID,
		&i.ChurchMembersCount,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
	)
	return i, err
}

const getUserProfileByUID = `-- name: GetUserProfileByUID :one
SELECT id, user_id, image_url, following_count, followers_count, entity_type, posts_count, header_image_url, about, website FROM entity_profiles WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserProfileByUID(ctx context.Context, userID uuid.UUID) (EntityProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUID, userID)
	var i EntityProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageUrl,
		&i.FollowingCount,
		&i.FollowersCount,
		&i.EntityType,
		&i.PostsCount,
		&i.HeaderImageUrl,
		&i.About,
		&i.Website,
	)
	return i, err
}

const getUserProfileByUsername = `-- name: GetUserProfileByUsername :one
SELECT
  u.id,
  u.username,
  u.email,
  u.phone,
  u.created_at,
  u.user_type,
  CASE
    WHEN u.user_type = 'user' THEN us.first_name
    WHEN u.user_type = 'churchAdmin' THEN c.name
    ELSE NULL
  END AS first_name,
  CASE
    WHEN u.user_type = 'user' THEN us.last_name
    ELSE NULL
  END AS last_name,
  ep.image_url,
  u.is_verified,
  ep.following_count,
  ep.followers_count,
  ep.posts_count,
  ep.header_image_url,
  ep.website,
  ep.about,
  EXISTS (
    SELECT 1
    FROM follow f
    WHERE f.follower_user_id = $1 AND f.following_user_id = u.id
  ) AS is_following,
  EXISTS (
    SELECT 1
    FROM follow f
    WHERE f.follower_user_id = u.id AND f.following_user_id = $1
  ) AS is_followed,
  EXISTS (
        SELECT 1
        FROM user_church_membership ucm
        WHERE ucm.user_id = $1 AND ucm.church_id = c.id
    ) AS is_member,
  cl.address AS church_address,
  cl.city AS church_city,
  cl.postalCode AS church_postalCode,
  cl.lga AS church_lga,
  cl.state AS church_state,
  cl.country AS church_country,
  cl.location AS church_location,
  c.id AS church_id,
  c.denomination_id AS church_denomination_id,
  c.members_count As church_members_count
FROM
  authentications u
JOIN
  entity_profiles ep ON u.id = ep.user_id
LEFT JOIN
  users us ON u.id = us.user_id AND u.user_type = 'user'
LEFT JOIN
  churches c ON u.id = c.auth_id AND u.user_type = 'churchAdmin'
LEFT JOIN
  church_locations cl ON c.auth_id = cl.auth_id
WHERE
  u.username = $2 AND
  NOT EXISTS (
    SELECT 1
    FROM blocked_users bu
    WHERE bu.blocking_user_id = u.id AND bu.blocked_user_id = $1
  )
`

type GetUserProfileByUsernameParams struct {
	FollowerUserID uuid.UUID      `json:"follower_user_id"`
	Username       sql.NullString `json:"username"`
}

type GetUserProfileByUsernameRow struct {
	ID                   uuid.UUID      `json:"id"`
	Username             sql.NullString `json:"username"`
	Email                string         `json:"email"`
	Phone                sql.NullString `json:"phone"`
	CreatedAt            sql.NullTime   `json:"created_at"`
	UserType             string         `json:"user_type"`
	FirstName            interface{}    `json:"first_name"`
	LastName             interface{}    `json:"last_name"`
	ImageUrl             sql.NullString `json:"image_url"`
	IsVerified           sql.NullBool   `json:"is_verified"`
	FollowingCount       sql.NullInt32  `json:"following_count"`
	FollowersCount       sql.NullInt32  `json:"followers_count"`
	PostsCount           sql.NullInt32  `json:"posts_count"`
	HeaderImageUrl       sql.NullString `json:"header_image_url"`
	Website              sql.NullString `json:"website"`
	About                sql.NullString `json:"about"`
	IsFollowing          bool           `json:"is_following"`
	IsFollowed           bool           `json:"is_followed"`
	IsMember             bool           `json:"is_member"`
	ChurchAddress        sql.NullString `json:"church_address"`
	ChurchCity           sql.NullString `json:"church_city"`
	ChurchPostalcode     sql.NullString `json:"church_postalcode"`
	ChurchLga            sql.NullString `json:"church_lga"`
	ChurchState          sql.NullString `json:"church_state"`
	ChurchCountry        sql.NullString `json:"church_country"`
	ChurchLocation       interface{}    `json:"church_location"`
	ChurchID             sql.NullInt32  `json:"church_id"`
	ChurchDenominationID sql.NullInt32  `json:"church_denomination_id"`
	ChurchMembersCount   sql.NullInt32  `json:"church_members_count"`
}

// TODO: Remove too
// Joining with church_locations to get church location details
func (q *Queries) GetUserProfileByUsername(ctx context.Context, arg GetUserProfileByUsernameParams) (GetUserProfileByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUsername, arg.FollowerUserID, arg.Username)
	var i GetUserProfileByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UserType,
		&i.FirstName,
		&i.LastName,
		&i.ImageUrl,
		&i.IsVerified,
		&i.FollowingCount,
		&i.FollowersCount,
		&i.PostsCount,
		&i.HeaderImageUrl,
		&i.Website,
		&i.About,
		&i.IsFollowing,
		&i.IsFollowed,
		&i.IsMember,
		&i.ChurchAddress,
		&i.ChurchCity,
		&i.ChurchPostalcode,
		&i.ChurchLga,
		&i.ChurchState,
		&i.ChurchCountry,
		&i.ChurchLocation,
		&i.ChurchID,
		&i.ChurchDenominationID,
		&i.ChurchMembersCount,
	)
	return i, err
}

const getUserProfileByUsernameOld = `-- name: GetUserProfileByUsernameOld :one
SELECT
    u.id,
    u.username,
    u.email,
    u.phone,
    u.created_at,
    CASE
        WHEN u.user_type = 'user' THEN us.first_name
        WHEN u.user_type = 'churchAdmin' THEN c.name
        ELSE NULL
    END AS first_name,
    CASE
        WHEN u.user_type = 'user' THEN us.last_name
        ELSE NULL
    END AS last_name,
    ep.image_url,
    u.is_verified,
    ep.following_count,
    ep.followers_count,

    ep.posts_count,
    ep.header_image_url,
    ep.website,
    ep.about,
    EXISTS (
        SELECT 1
        FROM follow f
        WHERE f.follower_user_id = $1 AND f.following_user_id = u.id
    ) AS is_following,
    EXISTS (
        SELECT 1
        FROM follow f
        WHERE f.follower_user_id = u.id AND f.following_user_id = $1
    ) AS is_followed
FROM
    authentications u
JOIN
    entity_profiles ep ON u.id = ep.user_id
LEFT JOIN
    users us ON u.id = us.user_id AND u.user_type = 'user'
LEFT JOIN
    churches c ON u.id = c.auth_id AND u.user_type = 'churchAdmin'
WHERE
    u.username = $2 AND
    NOT EXISTS (
        SELECT 1
        FROM blocked_users bu
        WHERE bu.blocking_user_id = u.id AND bu.blocked_user_id = $1
    )
`

type GetUserProfileByUsernameOldParams struct {
	FollowerUserID uuid.UUID      `json:"follower_user_id"`
	Username       sql.NullString `json:"username"`
}

type GetUserProfileByUsernameOldRow struct {
	ID             uuid.UUID      `json:"id"`
	Username       sql.NullString `json:"username"`
	Email          string         `json:"email"`
	Phone          sql.NullString `json:"phone"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	FirstName      interface{}    `json:"first_name"`
	LastName       interface{}    `json:"last_name"`
	ImageUrl       sql.NullString `json:"image_url"`
	IsVerified     sql.NullBool   `json:"is_verified"`
	FollowingCount sql.NullInt32  `json:"following_count"`
	FollowersCount sql.NullInt32  `json:"followers_count"`
	PostsCount     sql.NullInt32  `json:"posts_count"`
	HeaderImageUrl sql.NullString `json:"header_image_url"`
	Website        sql.NullString `json:"website"`
	About          sql.NullString `json:"about"`
	IsFollowing    bool           `json:"is_following"`
	IsFollowed     bool           `json:"is_followed"`
}

func (q *Queries) GetUserProfileByUsernameOld(ctx context.Context, arg GetUserProfileByUsernameOldParams) (GetUserProfileByUsernameOldRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUsernameOld, arg.FollowerUserID, arg.Username)
	var i GetUserProfileByUsernameOldRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.ImageUrl,
		&i.IsVerified,
		&i.FollowingCount,
		&i.FollowersCount,
		&i.PostsCount,
		&i.HeaderImageUrl,
		&i.Website,
		&i.About,
		&i.IsFollowing,
		&i.IsFollowed,
	)
	return i, err
}

const getUserProfileOld = `-- name: GetUserProfileOld :one
SELECT
    u.id,
    u.username,
    u.email,
    u.phone,
    u.created_at,
    CASE
        WHEN u.user_type = 'user' THEN us.first_name
        WHEN u.user_type = 'churchAdmin' THEN c.name
        ELSE NULL
    END AS first_name,
    CASE
        WHEN u.user_type = 'user' THEN us.last_name
        ELSE NULL
    END AS last_name,
    ep.image_url,
    u.is_verified,
    ep.following_count,
    ep.followers_count,

    ep.posts_count,
    ep.header_image_url,
    ep.website,
    ep.about,
    EXISTS (
        SELECT 1
        FROM follow f
        WHERE f.follower_user_id = $1 AND f.following_user_id = u.id
    ) AS is_following,
    EXISTS (
        SELECT 1
        FROM follow f
        WHERE f.follower_user_id = u.id AND f.following_user_id = $1
    ) AS is_followed
FROM
    authentications u
JOIN
    entity_profiles ep ON u.id = ep.user_id
LEFT JOIN
    users us ON u.id = us.user_id AND u.user_type = 'user'
LEFT JOIN
    churches c ON u.id = c.auth_id AND u.user_type = 'churchAdmin'
WHERE
    u.id = $2 AND
    NOT EXISTS (
        SELECT 1
        FROM blocked_users bu
        WHERE bu.blocking_user_id = u.id AND bu.blocked_user_id = $1
    )
`

type GetUserProfileOldParams struct {
	FollowerUserID uuid.UUID `json:"follower_user_id"`
	ID             uuid.UUID `json:"id"`
}

type GetUserProfileOldRow struct {
	ID             uuid.UUID      `json:"id"`
	Username       sql.NullString `json:"username"`
	Email          string         `json:"email"`
	Phone          sql.NullString `json:"phone"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	FirstName      interface{}    `json:"first_name"`
	LastName       interface{}    `json:"last_name"`
	ImageUrl       sql.NullString `json:"image_url"`
	IsVerified     sql.NullBool   `json:"is_verified"`
	FollowingCount sql.NullInt32  `json:"following_count"`
	FollowersCount sql.NullInt32  `json:"followers_count"`
	PostsCount     sql.NullInt32  `json:"posts_count"`
	HeaderImageUrl sql.NullString `json:"header_image_url"`
	Website        sql.NullString `json:"website"`
	About          sql.NullString `json:"about"`
	IsFollowing    bool           `json:"is_following"`
	IsFollowed     bool           `json:"is_followed"`
}

// TODO: Old Remove down
func (q *Queries) GetUserProfileOld(ctx context.Context, arg GetUserProfileOldParams) (GetUserProfileOldRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileOld, arg.FollowerUserID, arg.ID)
	var i GetUserProfileOldRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.ImageUrl,
		&i.IsVerified,
		&i.FollowingCount,
		&i.FollowersCount,
		&i.PostsCount,
		&i.HeaderImageUrl,
		&i.Website,
		&i.About,
		&i.IsFollowing,
		&i.IsFollowed,
	)
	return i, err
}

const updateImgEntityProfile = `-- name: UpdateImgEntityProfile :exec
UPDATE entity_profiles SET image_url = $2, about = $3, website = $4, header_image_url = $5 WHERE user_id = $1
`

type UpdateImgEntityProfileParams struct {
	UserID         uuid.UUID      `json:"user_id"`
	ImageUrl       sql.NullString `json:"image_url"`
	About          sql.NullString `json:"about"`
	Website        sql.NullString `json:"website"`
	HeaderImageUrl sql.NullString `json:"header_image_url"`
}

func (q *Queries) UpdateImgEntityProfile(ctx context.Context, arg UpdateImgEntityProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateImgEntityProfile,
		arg.UserID,
		arg.ImageUrl,
		arg.About,
		arg.Website,
		arg.HeaderImageUrl,
	)
	return err
}

const updateIncreaseFollowers = `-- name: UpdateIncreaseFollowers :exec
UPDATE entity_profiles SET following_count = following_count + 1 WHERE user_id = $1
`

func (q *Queries) UpdateIncreaseFollowers(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateIncreaseFollowers, userID)
	return err
}

const updateIncreaseFollowing = `-- name: UpdateIncreaseFollowing :exec
UPDATE entity_profiles SET followers_count = followers_count + 1 WHERE user_id = $1
`

func (q *Queries) UpdateIncreaseFollowing(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateIncreaseFollowing, userID)
	return err
}

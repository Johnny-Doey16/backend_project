// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: change_identity.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createChangeIdRequest = `-- name: CreateChangeIdRequest :exec
INSERT INTO change_identifier_requests (user_id, identifier, token, type, expires_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateChangeIdRequestParams struct {
	UserID     uuid.UUID `json:"user_id"`
	Identifier string    `json:"identifier"`
	Token      string    `json:"token"`
	Type       string    `json:"type"`
	ExpiresAt  time.Time `json:"expires_at"`
}

func (q *Queries) CreateChangeIdRequest(ctx context.Context, arg CreateChangeIdRequestParams) error {
	_, err := q.db.ExecContext(ctx, createChangeIdRequest,
		arg.UserID,
		arg.Identifier,
		arg.Token,
		arg.Type,
		arg.ExpiresAt,
	)
	return err
}

const deleteChangeIdRequestByID = `-- name: DeleteChangeIdRequestByID :exec
DELETE FROM change_identifier_requests WHERE id = $1
`

func (q *Queries) DeleteChangeIdRequestByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteChangeIdRequestByID, id)
	return err
}

const getChangeIdRequestByID = `-- name: GetChangeIdRequestByID :one
SELECT id, user_id, identifier, token, type, used, created_at, expires_at FROM change_identifier_requests WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChangeIdRequestByID(ctx context.Context, id int32) (ChangeIdentifierRequest, error) {
	row := q.db.QueryRowContext(ctx, getChangeIdRequestByID, id)
	var i ChangeIdentifierRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Identifier,
		&i.Token,
		&i.Type,
		&i.Used,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getChangeIdRequestByToken = `-- name: GetChangeIdRequestByToken :one
SELECT id, user_id, identifier, token, type, used, created_at, expires_at FROM change_identifier_requests WHERE token = $1 LIMIT 1
`

func (q *Queries) GetChangeIdRequestByToken(ctx context.Context, token string) (ChangeIdentifierRequest, error) {
	row := q.db.QueryRowContext(ctx, getChangeIdRequestByToken, token)
	var i ChangeIdentifierRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Identifier,
		&i.Token,
		&i.Type,
		&i.Used,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateChangeIdByToken = `-- name: UpdateChangeIdByToken :exec
UPDATE change_identifier_requests SET used = $1 WHERE token = $2
`

type UpdateChangeIdByTokenParams struct {
	Used  sql.NullBool `json:"used"`
	Token string       `json:"token"`
}

func (q *Queries) UpdateChangeIdByToken(ctx context.Context, arg UpdateChangeIdByTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateChangeIdByToken, arg.Used, arg.Token)
	return err
}

const updateChangeIdRequest = `-- name: UpdateChangeIdRequest :exec
UPDATE change_identifier_requests SET used = $1 WHERE id = $2
`

type UpdateChangeIdRequestParams struct {
	Used sql.NullBool `json:"used"`
	ID   int32        `json:"id"`
}

func (q *Queries) UpdateChangeIdRequest(ctx context.Context, arg UpdateChangeIdRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateChangeIdRequest, arg.Used, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sm_recommend_gpt3.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getPostsRecommendationCheck = `-- name: GetPostsRecommendationCheck :many

WITH UserActivityRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at, pi.id, pi.post_id, pi.image_url, pi.caption
    FROM posts p
    LEFT JOIN posts_images pi ON p.id = pi.post_id
    WHERE p.user_id = $1 OR p.id IN (SELECT post_id FROM likes WHERE user_id = $1)
    ORDER BY p.created_at DESC
    LIMIT 3
),

PopularPostsRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at, pi.id, pi.post_id, pi.image_url, pi.caption
    FROM posts p
    LEFT JOIN posts_images pi ON p.id = pi.post_id
    JOIN posts_metrics pm ON p.id = pm.post_id
    ORDER BY pm.likes DESC
    LIMIT 3
),

FollowedUsersRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at, pi.id, pi.post_id, pi.image_url, pi.caption
    FROM posts p
    LEFT JOIN posts_images pi ON p.id = pi.post_id
    JOIN follow f ON p.user_id = f.following_user_id
    WHERE f.follower_user_id = $1
    ORDER BY p.created_at DESC
    LIMIT 2
),

CollaborativeFilteringRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at, pi.id, pi.post_id, pi.image_url, pi.caption
    FROM posts p
    LEFT JOIN posts_images pi ON p.id = pi.post_id
    JOIN likes l ON p.id = l.post_id
    WHERE l.user_id IN (
        SELECT following_user_id
        FROM follow
        WHERE follower_user_id = $1
    )
    AND p.id NOT IN (
        SELECT id
        FROM posts
        WHERE user_id = $1
    )
    ORDER BY p.created_at DESC
    LIMIT 2
),

CombinedRecommendations AS (
    SELECT useractivityrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, useractivityrecommendations.id, post_id, image_url, caption FROM UserActivityRecommendations
    UNION
    SELECT popularpostsrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, popularpostsrecommendations.id, post_id, image_url, caption FROM PopularPostsRecommendations
    UNION
    SELECT followedusersrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, followedusersrecommendations.id, post_id, image_url, caption FROM FollowedUsersRecommendations
    UNION
    SELECT collaborativefilteringrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, collaborativefilteringrecommendations.id, post_id, image_url, caption FROM CollaborativeFilteringRecommendations
)

SELECT combinedrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, combinedrecommendations.id, post_id, image_url, caption FROM CombinedRecommendations
ORDER BY created_at DESC
LIMIT 10
`

type GetPostsRecommendationCheckRow struct {
	ID          uuid.UUID      `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	Content     string         `json:"content"`
	TotalImages sql.NullInt32  `json:"total_images"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	SuspendedAt sql.NullTime   `json:"suspended_at"`
	DeletedAt   sql.NullTime   `json:"deleted_at"`
	ID_2        sql.NullInt32  `json:"id_2"`
	PostID      uuid.NullUUID  `json:"post_id"`
	ImageUrl    sql.NullString `json:"image_url"`
	Caption     sql.NullString `json:"caption"`
}

func (q *Queries) GetPostsRecommendationCheck(ctx context.Context, userID uuid.UUID) ([]GetPostsRecommendationCheckRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsRecommendationCheck, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsRecommendationCheckRow{}
	for rows.Next() {
		var i GetPostsRecommendationCheckRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.TotalImages,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SuspendedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.PostID,
			&i.ImageUrl,
			&i.Caption,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsRecommendationFUCKED = `-- name: GetPostsRecommendationFUCKED :many

WITH UserActivityRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at, pi.id, pi.post_id, pi.image_url, pi.caption
    FROM posts p
    LEFT JOIN posts_images pi ON p.id = pi.post_id
    WHERE p.user_id = $1 OR p.id IN (SELECT post_id FROM likes WHERE user_id = $1)
    ORDER BY p.created_at DESC
    LIMIT 3
),

PopularPostsRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at, pi.id, pi.post_id, pi.image_url, pi.caption
    FROM posts p
    LEFT JOIN posts_images pi ON p.id = pi.post_id
    JOIN posts_metrics pm ON p.id = pm.post_id
    ORDER BY pm.likes DESC
    LIMIT 3
),

FollowedUsersRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at, pi.id, pi.post_id, pi.image_url, pi.caption
    FROM posts p
    LEFT JOIN posts_images pi ON p.id = pi.post_id
    JOIN follow f ON p.user_id = f.following_user_id
    WHERE f.follower_user_id = $1
    ORDER BY p.created_at DESC
    LIMIT 2
),

CollaborativeFilteringRecommendations AS (
    SELECT p.id, p.user_id, p.content, p.total_images, p.created_at, p.updated_at, p.suspended_at, p.deleted_at, pi.id, pi.post_id, pi.image_url, pi.caption
    FROM posts p
    LEFT JOIN posts_images pi ON p.id = pi.post_id
    JOIN likes l ON p.id = l.post_id
    WHERE l.user_id IN (
        SELECT following_user_id
        FROM follow
        WHERE follower_user_id = $1
    )
    AND p.id NOT IN (
        SELECT id
        FROM posts
        WHERE user_id = $1
    )
    ORDER BY p.created_at DESC
    LIMIT 2
),

CombinedRecommendations AS (
    SELECT useractivityrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, useractivityrecommendations.id, post_id, image_url, caption FROM UserActivityRecommendations
    UNION
    SELECT popularpostsrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, popularpostsrecommendations.id, post_id, image_url, caption FROM PopularPostsRecommendations
    UNION
    SELECT followedusersrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, followedusersrecommendations.id, post_id, image_url, caption FROM FollowedUsersRecommendations
    UNION
    SELECT collaborativefilteringrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, collaborativefilteringrecommendations.id, post_id, image_url, caption FROM CollaborativeFilteringRecommendations
)

SELECT combinedrecommendations.id, user_id, content, total_images, created_at, updated_at, suspended_at, deleted_at, combinedrecommendations.id, post_id, image_url, caption FROM CombinedRecommendations
ORDER BY created_at DESC
LIMIT 10
`

type GetPostsRecommendationFUCKEDRow struct {
	ID          uuid.UUID      `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	Content     string         `json:"content"`
	TotalImages sql.NullInt32  `json:"total_images"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	SuspendedAt sql.NullTime   `json:"suspended_at"`
	DeletedAt   sql.NullTime   `json:"deleted_at"`
	ID_2        sql.NullInt32  `json:"id_2"`
	PostID      uuid.NullUUID  `json:"post_id"`
	ImageUrl    sql.NullString `json:"image_url"`
	Caption     sql.NullString `json:"caption"`
}

func (q *Queries) GetPostsRecommendationFUCKED(ctx context.Context, userID uuid.UUID) ([]GetPostsRecommendationFUCKEDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsRecommendationFUCKED, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsRecommendationFUCKEDRow{}
	for rows.Next() {
		var i GetPostsRecommendationFUCKEDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.TotalImages,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SuspendedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.PostID,
			&i.ImageUrl,
			&i.Caption,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

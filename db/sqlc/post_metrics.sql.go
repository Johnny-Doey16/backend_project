// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: post_metrics.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMetric = `-- name: CreateMetric :exec
INSERT INTO posts_metrics (post_id, views, likes, comments, reposts) VALUES ($1, $2, $3, $4, $5)
`

type CreateMetricParams struct {
	PostID   uuid.UUID     `json:"post_id"`
	Views    sql.NullInt32 `json:"views"`
	Likes    sql.NullInt32 `json:"likes"`
	Comments sql.NullInt32 `json:"comments"`
	Reposts  sql.NullInt32 `json:"reposts"`
}

func (q *Queries) CreateMetric(ctx context.Context, arg CreateMetricParams) error {
	_, err := q.db.ExecContext(ctx, createMetric,
		arg.PostID,
		arg.Views,
		arg.Likes,
		arg.Comments,
		arg.Reposts,
	)
	return err
}

const incrementComments = `-- name: IncrementComments :one
UPDATE posts_metrics SET comments = comments + 1 WHERE post_id = $1
RETURNING id, post_id, views, likes, comments, reposts
`

func (q *Queries) IncrementComments(ctx context.Context, postID uuid.UUID) (PostsMetric, error) {
	row := q.db.QueryRowContext(ctx, incrementComments, postID)
	var i PostsMetric
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Views,
		&i.Likes,
		&i.Comments,
		&i.Reposts,
	)
	return i, err
}

const incrementLikes = `-- name: IncrementLikes :exec
UPDATE posts_metrics SET likes = likes + 1 WHERE post_id = $1
`

func (q *Queries) IncrementLikes(ctx context.Context, postID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementLikes, postID)
	return err
}

const incrementReposts = `-- name: IncrementReposts :one
UPDATE posts_metrics SET reposts = reposts + 1 WHERE post_id = $1
RETURNING reposts AS total_reposts
`

func (q *Queries) IncrementReposts(ctx context.Context, postID uuid.UUID) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, incrementReposts, postID)
	var total_reposts sql.NullInt32
	err := row.Scan(&total_reposts)
	return total_reposts, err
}

const incrementViews = `-- name: IncrementViews :exec
UPDATE posts_metrics SET views = views + 1 WHERE post_id = $1
`

func (q *Queries) IncrementViews(ctx context.Context, postID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementViews, postID)
	return err
}

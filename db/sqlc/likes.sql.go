// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: likes.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addLike = `-- name: AddLike :exec
INSERT INTO likes (user_id, post_id)
VALUES ($1, $2)
ON CONFLICT (user_id, post_id) DO NOTHING
`

type AddLikeParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) AddLike(ctx context.Context, arg AddLikeParams) error {
	_, err := q.db.ExecContext(ctx, addLike, arg.UserID, arg.PostID)
	return err
}

const decrementLikeCount = `-- name: DecrementLikeCount :one
UPDATE posts_metrics
SET likes = GREATEST(likes - 1, 0) -- Prevents the likes count from going negative
WHERE post_id = $1
RETURNING id, post_id, views, likes, comments, reposts
`

func (q *Queries) DecrementLikeCount(ctx context.Context, postID uuid.UUID) (PostsMetric, error) {
	row := q.db.QueryRowContext(ctx, decrementLikeCount, postID)
	var i PostsMetric
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Views,
		&i.Likes,
		&i.Comments,
		&i.Reposts,
	)
	return i, err
}

const getUserLikedPost = `-- name: GetUserLikedPost :one
SELECT id, user_id, post_id FROM likes
WHERE user_id = $1 AND
post_id = $2
`

type GetUserLikedPostParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) GetUserLikedPost(ctx context.Context, arg GetUserLikedPostParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, getUserLikedPost, arg.UserID, arg.PostID)
	var i Like
	err := row.Scan(&i.ID, &i.UserID, &i.PostID)
	return i, err
}

const incrementLikeCount = `-- name: IncrementLikeCount :one
UPDATE posts_metrics
SET likes = likes + 1
WHERE post_id = $1
RETURNING id, post_id, views, likes, comments, reposts
`

func (q *Queries) IncrementLikeCount(ctx context.Context, postID uuid.UUID) (PostsMetric, error) {
	row := q.db.QueryRowContext(ctx, incrementLikeCount, postID)
	var i PostsMetric
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Views,
		&i.Likes,
		&i.Comments,
		&i.Reposts,
	)
	return i, err
}

const likePost = `-- name: LikePost :many
WITH upsert_like AS (
    INSERT INTO likes (user_id, post_id)
    VALUES ($1, $2)
    ON CONFLICT (user_id, post_id) DO NOTHING
    RETURNING post_id
),
deleted_like AS (
    DELETE FROM likes
    WHERE (user_id, post_id) = ($1, $2)
    RETURNING post_id
),
updated_likes AS (
    UPDATE posts_metrics
    SET likes = CASE
        WHEN EXISTS (SELECT 1 FROM upsert_like) THEN likes + 1
        WHEN EXISTS (SELECT 1 FROM deleted_like) THEN GREATEST(likes - 1, 0)
        ELSE likes
    END
    WHERE post_id = $2
    RETURNING id, post_id, views, likes, comments, reposts, EXISTS (SELECT 1 FROM upsert_like) AS liked
)
SELECT id, post_id, views, likes, comments, reposts, liked, CASE WHEN liked THEN true ELSE false END AS liked FROM updated_likes
`

type LikePostParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

type LikePostRow struct {
	ID       int32         `json:"id"`
	PostID   uuid.UUID     `json:"post_id"`
	Views    sql.NullInt32 `json:"views"`
	Likes    sql.NullInt32 `json:"likes"`
	Comments sql.NullInt32 `json:"comments"`
	Reposts  sql.NullInt32 `json:"reposts"`
	Liked    bool          `json:"liked"`
	Liked_2  bool          `json:"liked_2"`
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) ([]LikePostRow, error) {
	rows, err := q.db.QueryContext(ctx, likePost, arg.UserID, arg.PostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LikePostRow{}
	for rows.Next() {
		var i LikePostRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Views,
			&i.Likes,
			&i.Comments,
			&i.Reposts,
			&i.Liked,
			&i.Liked_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLike = `-- name: RemoveLike :exec
DELETE FROM likes
WHERE user_id = $1 AND post_id = $2
`

type RemoveLikeParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) RemoveLike(ctx context.Context, arg RemoveLikeParams) error {
	_, err := q.db.ExecContext(ctx, removeLike, arg.UserID, arg.PostID)
	return err
}

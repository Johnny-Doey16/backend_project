// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: reposts.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createRepost = `-- name: CreateRepost :one
INSERT INTO repost (user_id, original_post_id)
VALUES ($1, $2)
RETURNING id, user_id, original_post_id, created_at
`

type CreateRepostParams struct {
	UserID         uuid.UUID `json:"user_id"`
	OriginalPostID uuid.UUID `json:"original_post_id"`
}

func (q *Queries) CreateRepost(ctx context.Context, arg CreateRepostParams) (Repost, error) {
	row := q.db.QueryRowContext(ctx, createRepost, arg.UserID, arg.OriginalPostID)
	var i Repost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalPostID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRepost = `-- name: DeleteRepost :exec
DELETE FROM repost
WHERE id = $1
`

func (q *Queries) DeleteRepost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRepost, id)
	return err
}

const getRepostByID = `-- name: GetRepostByID :one
SELECT id, user_id, original_post_id, created_at
FROM repost
WHERE id = $1
`

func (q *Queries) GetRepostByID(ctx context.Context, id int32) (Repost, error) {
	row := q.db.QueryRowContext(ctx, getRepostByID, id)
	var i Repost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalPostID,
		&i.CreatedAt,
	)
	return i, err
}

const getRepostsByUserID = `-- name: GetRepostsByUserID :many
SELECT id, user_id, original_post_id, created_at
FROM repost
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetRepostsByUserID(ctx context.Context, userID uuid.UUID) ([]Repost, error) {
	rows, err := q.db.QueryContext(ctx, getRepostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repost{}
	for rows.Next() {
		var i Repost
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalPostID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
